"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@neondatabase";
exports.ids = ["vendor-chunks/@neondatabase"];
exports.modules = {

/***/ "(rsc)/./node_modules/@neondatabase/serverless/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@neondatabase/serverless/index.js ***!
  \********************************************************/
/***/ ((module) => {

eval("\nvar Zs = Object.create;\nvar _e = Object.defineProperty;\nvar Js = Object.getOwnPropertyDescriptor;\nvar Xs = Object.getOwnPropertyNames;\nvar eo = Object.getPrototypeOf, to = Object.prototype.hasOwnProperty;\nvar ro = (r, e, t)=>e in r ? _e(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t;\nvar a = (r, e)=>_e(r, \"name\", {\n        value: e,\n        configurable: !0\n    });\nvar W = (r, e)=>()=>(r && (e = r(r = 0)), e);\nvar I = (r, e)=>()=>(e || r((e = {\n            exports: {}\n        }).exports, e), e.exports), Y = (r, e)=>{\n    for(var t in e)_e(r, t, {\n        get: e[t],\n        enumerable: !0\n    });\n}, An = (r, e, t, n)=>{\n    if (e && typeof e == \"object\" || typeof e == \"function\") for (let i of Xs(e))!to.call(r, i) && i !== t && _e(r, i, {\n        get: ()=>e[i],\n        enumerable: !(n = Js(e, i)) || n.enumerable\n    });\n    return r;\n};\nvar Ne = (r, e, t)=>(t = r != null ? Zs(eo(r)) : {}, An(e || !r || !r.__esModule ? _e(t, \"default\", {\n        value: r,\n        enumerable: !0\n    }) : t, r)), U = (r)=>An(_e({}, \"__esModule\", {\n        value: !0\n    }), r);\nvar T = (r, e, t)=>(ro(r, typeof e != \"symbol\" ? e + \"\" : e, t), t);\nvar Tn = I((nt)=>{\n    \"use strict\";\n    p();\n    nt.byteLength = io;\n    nt.toByteArray = oo;\n    nt.fromByteArray = co;\n    var oe = [], J = [], no = typeof Uint8Array < \"u\" ? Uint8Array : Array, Tt = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n    for(xe = 0, Cn = Tt.length; xe < Cn; ++xe)oe[xe] = Tt[xe], J[Tt.charCodeAt(xe)] = xe;\n    var xe, Cn;\n    J[\"-\".charCodeAt(0)] = 62;\n    J[\"_\".charCodeAt(0)] = 63;\n    function In(r) {\n        var e = r.length;\n        if (e % 4 > 0) throw new Error(\"Invalid string. Length must be a multiple of 4\");\n        var t = r.indexOf(\"=\");\n        t === -1 && (t = e);\n        var n = t === e ? 0 : 4 - t % 4;\n        return [\n            t,\n            n\n        ];\n    }\n    a(In, \"getLens\");\n    function io(r) {\n        var e = In(r), t = e[0], n = e[1];\n        return (t + n) * 3 / 4 - n;\n    }\n    a(io, \"byteLength\");\n    function so(r, e, t) {\n        return (e + t) * 3 / 4 - t;\n    }\n    a(so, \"_byteLength\");\n    function oo(r) {\n        var e, t = In(r), n = t[0], i = t[1], s = new no(so(r, n, i)), o = 0, u = i > 0 ? n - 4 : n, c;\n        for(c = 0; c < u; c += 4)e = J[r.charCodeAt(c)] << 18 | J[r.charCodeAt(c + 1)] << 12 | J[r.charCodeAt(c + 2)] << 6 | J[r.charCodeAt(c + 3)], s[o++] = e >> 16 & 255, s[o++] = e >> 8 & 255, s[o++] = e & 255;\n        return i === 2 && (e = J[r.charCodeAt(c)] << 2 | J[r.charCodeAt(c + 1)] >> 4, s[o++] = e & 255), i === 1 && (e = J[r.charCodeAt(c)] << 10 | J[r.charCodeAt(c + 1)] << 4 | J[r.charCodeAt(c + 2)] >> 2, s[o++] = e >> 8 & 255, s[o++] = e & 255), s;\n    }\n    a(oo, \"toByteArray\");\n    function ao(r) {\n        return oe[r >> 18 & 63] + oe[r >> 12 & 63] + oe[r >> 6 & 63] + oe[r & 63];\n    }\n    a(ao, \"tripletToBase64\");\n    function uo(r, e, t) {\n        for(var n, i = [], s = e; s < t; s += 3)n = (r[s] << 16 & 16711680) + (r[s + 1] << 8 & 65280) + (r[s + 2] & 255), i.push(ao(n));\n        return i.join(\"\");\n    }\n    a(uo, \"encodeChunk\");\n    function co(r) {\n        for(var e, t = r.length, n = t % 3, i = [], s = 16383, o = 0, u = t - n; o < u; o += s)i.push(uo(r, o, o + s > u ? u : o + s));\n        return n === 1 ? (e = r[t - 1], i.push(oe[e >> 2] + oe[e << 4 & 63] + \"==\")) : n === 2 && (e = (r[t - 2] << 8) + r[t - 1], i.push(oe[e >> 10] + oe[e >> 4 & 63] + oe[e << 2 & 63] + \"=\")), i.join(\"\");\n    }\n    a(co, \"fromByteArray\");\n});\nvar Pn = I((Pt)=>{\n    p();\n    Pt.read = function(r, e, t, n, i) {\n        var s, o, u = i * 8 - n - 1, c = (1 << u) - 1, h = c >> 1, f = -7, m = t ? i - 1 : 0, x = t ? -1 : 1, _ = r[e + m];\n        for(m += x, s = _ & (1 << -f) - 1, _ >>= -f, f += u; f > 0; s = s * 256 + r[e + m], m += x, f -= 8);\n        for(o = s & (1 << -f) - 1, s >>= -f, f += n; f > 0; o = o * 256 + r[e + m], m += x, f -= 8);\n        if (s === 0) s = 1 - h;\n        else {\n            if (s === c) return o ? NaN : (_ ? -1 : 1) * (1 / 0);\n            o = o + Math.pow(2, n), s = s - h;\n        }\n        return (_ ? -1 : 1) * o * Math.pow(2, s - n);\n    };\n    Pt.write = function(r, e, t, n, i, s) {\n        var o, u, c, h = s * 8 - i - 1, f = (1 << h) - 1, m = f >> 1, x = i === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0, _ = n ? 0 : s - 1, P = n ? 1 : -1, k = e < 0 || e === 0 && 1 / e < 0 ? 1 : 0;\n        for(e = Math.abs(e), isNaN(e) || e === 1 / 0 ? (u = isNaN(e) ? 1 : 0, o = f) : (o = Math.floor(Math.log(e) / Math.LN2), e * (c = Math.pow(2, -o)) < 1 && (o--, c *= 2), o + m >= 1 ? e += x / c : e += x * Math.pow(2, 1 - m), e * c >= 2 && (o++, c /= 2), o + m >= f ? (u = 0, o = f) : o + m >= 1 ? (u = (e * c - 1) * Math.pow(2, i), o = o + m) : (u = e * Math.pow(2, m - 1) * Math.pow(2, i), o = 0)); i >= 8; r[t + _] = u & 255, _ += P, u /= 256, i -= 8);\n        for(o = o << i | u, h += i; h > 0; r[t + _] = o & 255, _ += P, o /= 256, h -= 8);\n        r[t + _ - P] |= k * 128;\n    };\n});\nvar $n = I((Te)=>{\n    \"use strict\";\n    p();\n    var Bt = Tn(), Ce = Pn(), Bn = typeof Symbol == \"function\" && typeof Symbol.for == \"function\" ? Symbol.for(\"nodejs.util.inspect.custom\") : null;\n    Te.Buffer = l;\n    Te.SlowBuffer = mo;\n    Te.INSPECT_MAX_BYTES = 50;\n    var it = 2147483647;\n    Te.kMaxLength = it;\n    l.TYPED_ARRAY_SUPPORT = ho();\n    !l.TYPED_ARRAY_SUPPORT && typeof console < \"u\" && typeof console.error == \"function\" && console.error(\"This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.\");\n    function ho() {\n        try {\n            let r = new Uint8Array(1), e = {\n                foo: function() {\n                    return 42;\n                }\n            };\n            return Object.setPrototypeOf(e, Uint8Array.prototype), Object.setPrototypeOf(r, e), r.foo() === 42;\n        } catch  {\n            return !1;\n        }\n    }\n    a(ho, \"typedArraySupport\");\n    Object.defineProperty(l.prototype, \"parent\", {\n        enumerable: !0,\n        get: function() {\n            if (l.isBuffer(this)) return this.buffer;\n        }\n    });\n    Object.defineProperty(l.prototype, \"offset\", {\n        enumerable: !0,\n        get: function() {\n            if (l.isBuffer(this)) return this.byteOffset;\n        }\n    });\n    function le(r) {\n        if (r > it) throw new RangeError('The value \"' + r + '\" is invalid for option \"size\"');\n        let e = new Uint8Array(r);\n        return Object.setPrototypeOf(e, l.prototype), e;\n    }\n    a(le, \"createBuffer\");\n    function l(r, e, t) {\n        if (typeof r == \"number\") {\n            if (typeof e == \"string\") throw new TypeError('The \"string\" argument must be of type string. Received type number');\n            return Mt(r);\n        }\n        return Mn(r, e, t);\n    }\n    a(l, \"Buffer\");\n    l.poolSize = 8192;\n    function Mn(r, e, t) {\n        if (typeof r == \"string\") return fo(r, e);\n        if (ArrayBuffer.isView(r)) return po(r);\n        if (r == null) throw new TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \" + typeof r);\n        if (ae(r, ArrayBuffer) || r && ae(r.buffer, ArrayBuffer) || typeof SharedArrayBuffer < \"u\" && (ae(r, SharedArrayBuffer) || r && ae(r.buffer, SharedArrayBuffer))) return Rt(r, e, t);\n        if (typeof r == \"number\") throw new TypeError('The \"value\" argument must not be of type number. Received type number');\n        let n = r.valueOf && r.valueOf();\n        if (n != null && n !== r) return l.from(n, e, t);\n        let i = yo(r);\n        if (i) return i;\n        if (typeof Symbol < \"u\" && Symbol.toPrimitive != null && typeof r[Symbol.toPrimitive] == \"function\") return l.from(r[Symbol.toPrimitive](\"string\"), e, t);\n        throw new TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \" + typeof r);\n    }\n    a(Mn, \"from\");\n    l.from = function(r, e, t) {\n        return Mn(r, e, t);\n    };\n    Object.setPrototypeOf(l.prototype, Uint8Array.prototype);\n    Object.setPrototypeOf(l, Uint8Array);\n    function Dn(r) {\n        if (typeof r != \"number\") throw new TypeError('\"size\" argument must be of type number');\n        if (r < 0) throw new RangeError('The value \"' + r + '\" is invalid for option \"size\"');\n    }\n    a(Dn, \"assertSize\");\n    function lo(r, e, t) {\n        return Dn(r), r <= 0 ? le(r) : e !== void 0 ? typeof t == \"string\" ? le(r).fill(e, t) : le(r).fill(e) : le(r);\n    }\n    a(lo, \"alloc\");\n    l.alloc = function(r, e, t) {\n        return lo(r, e, t);\n    };\n    function Mt(r) {\n        return Dn(r), le(r < 0 ? 0 : Dt(r) | 0);\n    }\n    a(Mt, \"allocUnsafe\");\n    l.allocUnsafe = function(r) {\n        return Mt(r);\n    };\n    l.allocUnsafeSlow = function(r) {\n        return Mt(r);\n    };\n    function fo(r, e) {\n        if ((typeof e != \"string\" || e === \"\") && (e = \"utf8\"), !l.isEncoding(e)) throw new TypeError(\"Unknown encoding: \" + e);\n        let t = kn(r, e) | 0, n = le(t), i = n.write(r, e);\n        return i !== t && (n = n.slice(0, i)), n;\n    }\n    a(fo, \"fromString\");\n    function Lt(r) {\n        let e = r.length < 0 ? 0 : Dt(r.length) | 0, t = le(e);\n        for(let n = 0; n < e; n += 1)t[n] = r[n] & 255;\n        return t;\n    }\n    a(Lt, \"fromArrayLike\");\n    function po(r) {\n        if (ae(r, Uint8Array)) {\n            let e = new Uint8Array(r);\n            return Rt(e.buffer, e.byteOffset, e.byteLength);\n        }\n        return Lt(r);\n    }\n    a(po, \"fromArrayView\");\n    function Rt(r, e, t) {\n        if (e < 0 || r.byteLength < e) throw new RangeError('\"offset\" is outside of buffer bounds');\n        if (r.byteLength < e + (t || 0)) throw new RangeError('\"length\" is outside of buffer bounds');\n        let n;\n        return e === void 0 && t === void 0 ? n = new Uint8Array(r) : t === void 0 ? n = new Uint8Array(r, e) : n = new Uint8Array(r, e, t), Object.setPrototypeOf(n, l.prototype), n;\n    }\n    a(Rt, \"fromArrayBuffer\");\n    function yo(r) {\n        if (l.isBuffer(r)) {\n            let e = Dt(r.length) | 0, t = le(e);\n            return t.length === 0 || r.copy(t, 0, 0, e), t;\n        }\n        if (r.length !== void 0) return typeof r.length != \"number\" || Ut(r.length) ? le(0) : Lt(r);\n        if (r.type === \"Buffer\" && Array.isArray(r.data)) return Lt(r.data);\n    }\n    a(yo, \"fromObject\");\n    function Dt(r) {\n        if (r >= it) throw new RangeError(\"Attempt to allocate Buffer larger than maximum size: 0x\" + it.toString(16) + \" bytes\");\n        return r | 0;\n    }\n    a(Dt, \"checked\");\n    function mo(r) {\n        return +r != r && (r = 0), l.alloc(+r);\n    }\n    a(mo, \"SlowBuffer\");\n    l.isBuffer = a(function(e) {\n        return e != null && e._isBuffer === !0 && e !== l.prototype;\n    }, \"isBuffer\");\n    l.compare = a(function(e, t) {\n        if (ae(e, Uint8Array) && (e = l.from(e, e.offset, e.byteLength)), ae(t, Uint8Array) && (t = l.from(t, t.offset, t.byteLength)), !l.isBuffer(e) || !l.isBuffer(t)) throw new TypeError('The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array');\n        if (e === t) return 0;\n        let n = e.length, i = t.length;\n        for(let s = 0, o = Math.min(n, i); s < o; ++s)if (e[s] !== t[s]) {\n            n = e[s], i = t[s];\n            break;\n        }\n        return n < i ? -1 : i < n ? 1 : 0;\n    }, \"compare\");\n    l.isEncoding = a(function(e) {\n        switch(String(e).toLowerCase()){\n            case \"hex\":\n            case \"utf8\":\n            case \"utf-8\":\n            case \"ascii\":\n            case \"latin1\":\n            case \"binary\":\n            case \"base64\":\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n                return !0;\n            default:\n                return !1;\n        }\n    }, \"isEncoding\");\n    l.concat = a(function(e, t) {\n        if (!Array.isArray(e)) throw new TypeError('\"list\" argument must be an Array of Buffers');\n        if (e.length === 0) return l.alloc(0);\n        let n;\n        if (t === void 0) for(t = 0, n = 0; n < e.length; ++n)t += e[n].length;\n        let i = l.allocUnsafe(t), s = 0;\n        for(n = 0; n < e.length; ++n){\n            let o = e[n];\n            if (ae(o, Uint8Array)) s + o.length > i.length ? (l.isBuffer(o) || (o = l.from(o)), o.copy(i, s)) : Uint8Array.prototype.set.call(i, o, s);\n            else if (l.isBuffer(o)) o.copy(i, s);\n            else throw new TypeError('\"list\" argument must be an Array of Buffers');\n            s += o.length;\n        }\n        return i;\n    }, \"concat\");\n    function kn(r, e) {\n        if (l.isBuffer(r)) return r.length;\n        if (ArrayBuffer.isView(r) || ae(r, ArrayBuffer)) return r.byteLength;\n        if (typeof r != \"string\") throw new TypeError('The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof r);\n        let t = r.length, n = arguments.length > 2 && arguments[2] === !0;\n        if (!n && t === 0) return 0;\n        let i = !1;\n        for(;;)switch(e){\n            case \"ascii\":\n            case \"latin1\":\n            case \"binary\":\n                return t;\n            case \"utf8\":\n            case \"utf-8\":\n                return Ft(r).length;\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n                return t * 2;\n            case \"hex\":\n                return t >>> 1;\n            case \"base64\":\n                return Gn(r).length;\n            default:\n                if (i) return n ? -1 : Ft(r).length;\n                e = (\"\" + e).toLowerCase(), i = !0;\n        }\n    }\n    a(kn, \"byteLength\");\n    l.byteLength = kn;\n    function go(r, e, t) {\n        let n = !1;\n        if ((e === void 0 || e < 0) && (e = 0), e > this.length || ((t === void 0 || t > this.length) && (t = this.length), t <= 0) || (t >>>= 0, e >>>= 0, t <= e)) return \"\";\n        for(r || (r = \"utf8\");;)switch(r){\n            case \"hex\":\n                return Io(this, e, t);\n            case \"utf8\":\n            case \"utf-8\":\n                return On(this, e, t);\n            case \"ascii\":\n                return Ao(this, e, t);\n            case \"latin1\":\n            case \"binary\":\n                return Co(this, e, t);\n            case \"base64\":\n                return vo(this, e, t);\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n                return To(this, e, t);\n            default:\n                if (n) throw new TypeError(\"Unknown encoding: \" + r);\n                r = (r + \"\").toLowerCase(), n = !0;\n        }\n    }\n    a(go, \"slowToString\");\n    l.prototype._isBuffer = !0;\n    function Ee(r, e, t) {\n        let n = r[e];\n        r[e] = r[t], r[t] = n;\n    }\n    a(Ee, \"swap\");\n    l.prototype.swap16 = a(function() {\n        let e = this.length;\n        if (e % 2 !== 0) throw new RangeError(\"Buffer size must be a multiple of 16-bits\");\n        for(let t = 0; t < e; t += 2)Ee(this, t, t + 1);\n        return this;\n    }, \"swap16\");\n    l.prototype.swap32 = a(function() {\n        let e = this.length;\n        if (e % 4 !== 0) throw new RangeError(\"Buffer size must be a multiple of 32-bits\");\n        for(let t = 0; t < e; t += 4)Ee(this, t, t + 3), Ee(this, t + 1, t + 2);\n        return this;\n    }, \"swap32\");\n    l.prototype.swap64 = a(function() {\n        let e = this.length;\n        if (e % 8 !== 0) throw new RangeError(\"Buffer size must be a multiple of 64-bits\");\n        for(let t = 0; t < e; t += 8)Ee(this, t, t + 7), Ee(this, t + 1, t + 6), Ee(this, t + 2, t + 5), Ee(this, t + 3, t + 4);\n        return this;\n    }, \"swap64\");\n    l.prototype.toString = a(function() {\n        let e = this.length;\n        return e === 0 ? \"\" : arguments.length === 0 ? On(this, 0, e) : go.apply(this, arguments);\n    }, \"toString\");\n    l.prototype.toLocaleString = l.prototype.toString;\n    l.prototype.equals = a(function(e) {\n        if (!l.isBuffer(e)) throw new TypeError(\"Argument must be a Buffer\");\n        return this === e ? !0 : l.compare(this, e) === 0;\n    }, \"equals\");\n    l.prototype.inspect = a(function() {\n        let e = \"\", t = Te.INSPECT_MAX_BYTES;\n        return e = this.toString(\"hex\", 0, t).replace(/(.{2})/g, \"$1 \").trim(), this.length > t && (e += \" ... \"), \"<Buffer \" + e + \">\";\n    }, \"inspect\");\n    Bn && (l.prototype[Bn] = l.prototype.inspect);\n    l.prototype.compare = a(function(e, t, n, i, s) {\n        if (ae(e, Uint8Array) && (e = l.from(e, e.offset, e.byteLength)), !l.isBuffer(e)) throw new TypeError('The \"target\" argument must be one of type Buffer or Uint8Array. Received type ' + typeof e);\n        if (t === void 0 && (t = 0), n === void 0 && (n = e ? e.length : 0), i === void 0 && (i = 0), s === void 0 && (s = this.length), t < 0 || n > e.length || i < 0 || s > this.length) throw new RangeError(\"out of range index\");\n        if (i >= s && t >= n) return 0;\n        if (i >= s) return -1;\n        if (t >= n) return 1;\n        if (t >>>= 0, n >>>= 0, i >>>= 0, s >>>= 0, this === e) return 0;\n        let o = s - i, u = n - t, c = Math.min(o, u), h = this.slice(i, s), f = e.slice(t, n);\n        for(let m = 0; m < c; ++m)if (h[m] !== f[m]) {\n            o = h[m], u = f[m];\n            break;\n        }\n        return o < u ? -1 : u < o ? 1 : 0;\n    }, \"compare\");\n    function Un(r, e, t, n, i) {\n        if (r.length === 0) return -1;\n        if (typeof t == \"string\" ? (n = t, t = 0) : t > 2147483647 ? t = 2147483647 : t < -2147483648 && (t = -2147483648), t = +t, Ut(t) && (t = i ? 0 : r.length - 1), t < 0 && (t = r.length + t), t >= r.length) {\n            if (i) return -1;\n            t = r.length - 1;\n        } else if (t < 0) if (i) t = 0;\n        else return -1;\n        if (typeof e == \"string\" && (e = l.from(e, n)), l.isBuffer(e)) return e.length === 0 ? -1 : Ln(r, e, t, n, i);\n        if (typeof e == \"number\") return e = e & 255, typeof Uint8Array.prototype.indexOf == \"function\" ? i ? Uint8Array.prototype.indexOf.call(r, e, t) : Uint8Array.prototype.lastIndexOf.call(r, e, t) : Ln(r, [\n            e\n        ], t, n, i);\n        throw new TypeError(\"val must be string, number or Buffer\");\n    }\n    a(Un, \"bidirectionalIndexOf\");\n    function Ln(r, e, t, n, i) {\n        let s = 1, o = r.length, u = e.length;\n        if (n !== void 0 && (n = String(n).toLowerCase(), n === \"ucs2\" || n === \"ucs-2\" || n === \"utf16le\" || n === \"utf-16le\")) {\n            if (r.length < 2 || e.length < 2) return -1;\n            s = 2, o /= 2, u /= 2, t /= 2;\n        }\n        function c(f, m) {\n            return s === 1 ? f[m] : f.readUInt16BE(m * s);\n        }\n        a(c, \"read\");\n        let h;\n        if (i) {\n            let f = -1;\n            for(h = t; h < o; h++)if (c(r, h) === c(e, f === -1 ? 0 : h - f)) {\n                if (f === -1 && (f = h), h - f + 1 === u) return f * s;\n            } else f !== -1 && (h -= h - f), f = -1;\n        } else for(t + u > o && (t = o - u), h = t; h >= 0; h--){\n            let f = !0;\n            for(let m = 0; m < u; m++)if (c(r, h + m) !== c(e, m)) {\n                f = !1;\n                break;\n            }\n            if (f) return h;\n        }\n        return -1;\n    }\n    a(Ln, \"arrayIndexOf\");\n    l.prototype.includes = a(function(e, t, n) {\n        return this.indexOf(e, t, n) !== -1;\n    }, \"includes\");\n    l.prototype.indexOf = a(function(e, t, n) {\n        return Un(this, e, t, n, !0);\n    }, \"indexOf\");\n    l.prototype.lastIndexOf = a(function(e, t, n) {\n        return Un(this, e, t, n, !1);\n    }, \"lastIndexOf\");\n    function wo(r, e, t, n) {\n        t = Number(t) || 0;\n        let i = r.length - t;\n        n ? (n = Number(n), n > i && (n = i)) : n = i;\n        let s = e.length;\n        n > s / 2 && (n = s / 2);\n        let o;\n        for(o = 0; o < n; ++o){\n            let u = parseInt(e.substr(o * 2, 2), 16);\n            if (Ut(u)) return o;\n            r[t + o] = u;\n        }\n        return o;\n    }\n    a(wo, \"hexWrite\");\n    function bo(r, e, t, n) {\n        return st(Ft(e, r.length - t), r, t, n);\n    }\n    a(bo, \"utf8Write\");\n    function So(r, e, t, n) {\n        return st(Ro(e), r, t, n);\n    }\n    a(So, \"asciiWrite\");\n    function xo(r, e, t, n) {\n        return st(Gn(e), r, t, n);\n    }\n    a(xo, \"base64Write\");\n    function Eo(r, e, t, n) {\n        return st(Fo(e, r.length - t), r, t, n);\n    }\n    a(Eo, \"ucs2Write\");\n    l.prototype.write = a(function(e, t, n, i) {\n        if (t === void 0) i = \"utf8\", n = this.length, t = 0;\n        else if (n === void 0 && typeof t == \"string\") i = t, n = this.length, t = 0;\n        else if (isFinite(t)) t = t >>> 0, isFinite(n) ? (n = n >>> 0, i === void 0 && (i = \"utf8\")) : (i = n, n = void 0);\n        else throw new Error(\"Buffer.write(string, encoding, offset[, length]) is no longer supported\");\n        let s = this.length - t;\n        if ((n === void 0 || n > s) && (n = s), e.length > 0 && (n < 0 || t < 0) || t > this.length) throw new RangeError(\"Attempt to write outside buffer bounds\");\n        i || (i = \"utf8\");\n        let o = !1;\n        for(;;)switch(i){\n            case \"hex\":\n                return wo(this, e, t, n);\n            case \"utf8\":\n            case \"utf-8\":\n                return bo(this, e, t, n);\n            case \"ascii\":\n            case \"latin1\":\n            case \"binary\":\n                return So(this, e, t, n);\n            case \"base64\":\n                return xo(this, e, t, n);\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n                return Eo(this, e, t, n);\n            default:\n                if (o) throw new TypeError(\"Unknown encoding: \" + i);\n                i = (\"\" + i).toLowerCase(), o = !0;\n        }\n    }, \"write\");\n    l.prototype.toJSON = a(function() {\n        return {\n            type: \"Buffer\",\n            data: Array.prototype.slice.call(this._arr || this, 0)\n        };\n    }, \"toJSON\");\n    function vo(r, e, t) {\n        return e === 0 && t === r.length ? Bt.fromByteArray(r) : Bt.fromByteArray(r.slice(e, t));\n    }\n    a(vo, \"base64Slice\");\n    function On(r, e, t) {\n        t = Math.min(r.length, t);\n        let n = [], i = e;\n        for(; i < t;){\n            let s = r[i], o = null, u = s > 239 ? 4 : s > 223 ? 3 : s > 191 ? 2 : 1;\n            if (i + u <= t) {\n                let c, h, f, m;\n                switch(u){\n                    case 1:\n                        s < 128 && (o = s);\n                        break;\n                    case 2:\n                        c = r[i + 1], (c & 192) === 128 && (m = (s & 31) << 6 | c & 63, m > 127 && (o = m));\n                        break;\n                    case 3:\n                        c = r[i + 1], h = r[i + 2], (c & 192) === 128 && (h & 192) === 128 && (m = (s & 15) << 12 | (c & 63) << 6 | h & 63, m > 2047 && (m < 55296 || m > 57343) && (o = m));\n                        break;\n                    case 4:\n                        c = r[i + 1], h = r[i + 2], f = r[i + 3], (c & 192) === 128 && (h & 192) === 128 && (f & 192) === 128 && (m = (s & 15) << 18 | (c & 63) << 12 | (h & 63) << 6 | f & 63, m > 65535 && m < 1114112 && (o = m));\n                }\n            }\n            o === null ? (o = 65533, u = 1) : o > 65535 && (o -= 65536, n.push(o >>> 10 & 1023 | 55296), o = 56320 | o & 1023), n.push(o), i += u;\n        }\n        return _o(n);\n    }\n    a(On, \"utf8Slice\");\n    var Rn = 4096;\n    function _o(r) {\n        let e = r.length;\n        if (e <= Rn) return String.fromCharCode.apply(String, r);\n        let t = \"\", n = 0;\n        for(; n < e;)t += String.fromCharCode.apply(String, r.slice(n, n += Rn));\n        return t;\n    }\n    a(_o, \"decodeCodePointsArray\");\n    function Ao(r, e, t) {\n        let n = \"\";\n        t = Math.min(r.length, t);\n        for(let i = e; i < t; ++i)n += String.fromCharCode(r[i] & 127);\n        return n;\n    }\n    a(Ao, \"asciiSlice\");\n    function Co(r, e, t) {\n        let n = \"\";\n        t = Math.min(r.length, t);\n        for(let i = e; i < t; ++i)n += String.fromCharCode(r[i]);\n        return n;\n    }\n    a(Co, \"latin1Slice\");\n    function Io(r, e, t) {\n        let n = r.length;\n        (!e || e < 0) && (e = 0), (!t || t < 0 || t > n) && (t = n);\n        let i = \"\";\n        for(let s = e; s < t; ++s)i += Mo[r[s]];\n        return i;\n    }\n    a(Io, \"hexSlice\");\n    function To(r, e, t) {\n        let n = r.slice(e, t), i = \"\";\n        for(let s = 0; s < n.length - 1; s += 2)i += String.fromCharCode(n[s] + n[s + 1] * 256);\n        return i;\n    }\n    a(To, \"utf16leSlice\");\n    l.prototype.slice = a(function(e, t) {\n        let n = this.length;\n        e = ~~e, t = t === void 0 ? n : ~~t, e < 0 ? (e += n, e < 0 && (e = 0)) : e > n && (e = n), t < 0 ? (t += n, t < 0 && (t = 0)) : t > n && (t = n), t < e && (t = e);\n        let i = this.subarray(e, t);\n        return Object.setPrototypeOf(i, l.prototype), i;\n    }, \"slice\");\n    function q(r, e, t) {\n        if (r % 1 !== 0 || r < 0) throw new RangeError(\"offset is not uint\");\n        if (r + e > t) throw new RangeError(\"Trying to access beyond buffer length\");\n    }\n    a(q, \"checkOffset\");\n    l.prototype.readUintLE = l.prototype.readUIntLE = a(function(e, t, n) {\n        e = e >>> 0, t = t >>> 0, n || q(e, t, this.length);\n        let i = this[e], s = 1, o = 0;\n        for(; ++o < t && (s *= 256);)i += this[e + o] * s;\n        return i;\n    }, \"readUIntLE\");\n    l.prototype.readUintBE = l.prototype.readUIntBE = a(function(e, t, n) {\n        e = e >>> 0, t = t >>> 0, n || q(e, t, this.length);\n        let i = this[e + --t], s = 1;\n        for(; t > 0 && (s *= 256);)i += this[e + --t] * s;\n        return i;\n    }, \"readUIntBE\");\n    l.prototype.readUint8 = l.prototype.readUInt8 = a(function(e, t) {\n        return e = e >>> 0, t || q(e, 1, this.length), this[e];\n    }, \"readUInt8\");\n    l.prototype.readUint16LE = l.prototype.readUInt16LE = a(function(e, t) {\n        return e = e >>> 0, t || q(e, 2, this.length), this[e] | this[e + 1] << 8;\n    }, \"readUInt16LE\");\n    l.prototype.readUint16BE = l.prototype.readUInt16BE = a(function(e, t) {\n        return e = e >>> 0, t || q(e, 2, this.length), this[e] << 8 | this[e + 1];\n    }, \"readUInt16BE\");\n    l.prototype.readUint32LE = l.prototype.readUInt32LE = a(function(e, t) {\n        return e = e >>> 0, t || q(e, 4, this.length), (this[e] | this[e + 1] << 8 | this[e + 2] << 16) + this[e + 3] * 16777216;\n    }, \"readUInt32LE\");\n    l.prototype.readUint32BE = l.prototype.readUInt32BE = a(function(e, t) {\n        return e = e >>> 0, t || q(e, 4, this.length), this[e] * 16777216 + (this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3]);\n    }, \"readUInt32BE\");\n    l.prototype.readBigUInt64LE = de(a(function(e) {\n        e = e >>> 0, Ie(e, \"offset\");\n        let t = this[e], n = this[e + 7];\n        (t === void 0 || n === void 0) && Qe(e, this.length - 8);\n        let i = t + this[++e] * 2 ** 8 + this[++e] * 2 ** 16 + this[++e] * 2 ** 24, s = this[++e] + this[++e] * 2 ** 8 + this[++e] * 2 ** 16 + n * 2 ** 24;\n        return BigInt(i) + (BigInt(s) << BigInt(32));\n    }, \"readBigUInt64LE\"));\n    l.prototype.readBigUInt64BE = de(a(function(e) {\n        e = e >>> 0, Ie(e, \"offset\");\n        let t = this[e], n = this[e + 7];\n        (t === void 0 || n === void 0) && Qe(e, this.length - 8);\n        let i = t * 2 ** 24 + this[++e] * 2 ** 16 + this[++e] * 2 ** 8 + this[++e], s = this[++e] * 2 ** 24 + this[++e] * 2 ** 16 + this[++e] * 2 ** 8 + n;\n        return (BigInt(i) << BigInt(32)) + BigInt(s);\n    }, \"readBigUInt64BE\"));\n    l.prototype.readIntLE = a(function(e, t, n) {\n        e = e >>> 0, t = t >>> 0, n || q(e, t, this.length);\n        let i = this[e], s = 1, o = 0;\n        for(; ++o < t && (s *= 256);)i += this[e + o] * s;\n        return s *= 128, i >= s && (i -= Math.pow(2, 8 * t)), i;\n    }, \"readIntLE\");\n    l.prototype.readIntBE = a(function(e, t, n) {\n        e = e >>> 0, t = t >>> 0, n || q(e, t, this.length);\n        let i = t, s = 1, o = this[e + --i];\n        for(; i > 0 && (s *= 256);)o += this[e + --i] * s;\n        return s *= 128, o >= s && (o -= Math.pow(2, 8 * t)), o;\n    }, \"readIntBE\");\n    l.prototype.readInt8 = a(function(e, t) {\n        return e = e >>> 0, t || q(e, 1, this.length), this[e] & 128 ? (255 - this[e] + 1) * -1 : this[e];\n    }, \"readInt8\");\n    l.prototype.readInt16LE = a(function(e, t) {\n        e = e >>> 0, t || q(e, 2, this.length);\n        let n = this[e] | this[e + 1] << 8;\n        return n & 32768 ? n | 4294901760 : n;\n    }, \"readInt16LE\");\n    l.prototype.readInt16BE = a(function(e, t) {\n        e = e >>> 0, t || q(e, 2, this.length);\n        let n = this[e + 1] | this[e] << 8;\n        return n & 32768 ? n | 4294901760 : n;\n    }, \"readInt16BE\");\n    l.prototype.readInt32LE = a(function(e, t) {\n        return e = e >>> 0, t || q(e, 4, this.length), this[e] | this[e + 1] << 8 | this[e + 2] << 16 | this[e + 3] << 24;\n    }, \"readInt32LE\");\n    l.prototype.readInt32BE = a(function(e, t) {\n        return e = e >>> 0, t || q(e, 4, this.length), this[e] << 24 | this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3];\n    }, \"readInt32BE\");\n    l.prototype.readBigInt64LE = de(a(function(e) {\n        e = e >>> 0, Ie(e, \"offset\");\n        let t = this[e], n = this[e + 7];\n        (t === void 0 || n === void 0) && Qe(e, this.length - 8);\n        let i = this[e + 4] + this[e + 5] * 2 ** 8 + this[e + 6] * 2 ** 16 + (n << 24);\n        return (BigInt(i) << BigInt(32)) + BigInt(t + this[++e] * 2 ** 8 + this[++e] * 2 ** 16 + this[++e] * 2 ** 24);\n    }, \"readBigInt64LE\"));\n    l.prototype.readBigInt64BE = de(a(function(e) {\n        e = e >>> 0, Ie(e, \"offset\");\n        let t = this[e], n = this[e + 7];\n        (t === void 0 || n === void 0) && Qe(e, this.length - 8);\n        let i = (t << 24) + this[++e] * 2 ** 16 + this[++e] * 2 ** 8 + this[++e];\n        return (BigInt(i) << BigInt(32)) + BigInt(this[++e] * 2 ** 24 + this[++e] * 2 ** 16 + this[++e] * 2 ** 8 + n);\n    }, \"readBigInt64BE\"));\n    l.prototype.readFloatLE = a(function(e, t) {\n        return e = e >>> 0, t || q(e, 4, this.length), Ce.read(this, e, !0, 23, 4);\n    }, \"readFloatLE\");\n    l.prototype.readFloatBE = a(function(e, t) {\n        return e = e >>> 0, t || q(e, 4, this.length), Ce.read(this, e, !1, 23, 4);\n    }, \"readFloatBE\");\n    l.prototype.readDoubleLE = a(function(e, t) {\n        return e = e >>> 0, t || q(e, 8, this.length), Ce.read(this, e, !0, 52, 8);\n    }, \"readDoubleLE\");\n    l.prototype.readDoubleBE = a(function(e, t) {\n        return e = e >>> 0, t || q(e, 8, this.length), Ce.read(this, e, !1, 52, 8);\n    }, \"readDoubleBE\");\n    function G(r, e, t, n, i, s) {\n        if (!l.isBuffer(r)) throw new TypeError('\"buffer\" argument must be a Buffer instance');\n        if (e > i || e < s) throw new RangeError('\"value\" argument is out of bounds');\n        if (t + n > r.length) throw new RangeError(\"Index out of range\");\n    }\n    a(G, \"checkInt\");\n    l.prototype.writeUintLE = l.prototype.writeUIntLE = a(function(e, t, n, i) {\n        if (e = +e, t = t >>> 0, n = n >>> 0, !i) {\n            let u = Math.pow(2, 8 * n) - 1;\n            G(this, e, t, n, u, 0);\n        }\n        let s = 1, o = 0;\n        for(this[t] = e & 255; ++o < n && (s *= 256);)this[t + o] = e / s & 255;\n        return t + n;\n    }, \"writeUIntLE\");\n    l.prototype.writeUintBE = l.prototype.writeUIntBE = a(function(e, t, n, i) {\n        if (e = +e, t = t >>> 0, n = n >>> 0, !i) {\n            let u = Math.pow(2, 8 * n) - 1;\n            G(this, e, t, n, u, 0);\n        }\n        let s = n - 1, o = 1;\n        for(this[t + s] = e & 255; --s >= 0 && (o *= 256);)this[t + s] = e / o & 255;\n        return t + n;\n    }, \"writeUIntBE\");\n    l.prototype.writeUint8 = l.prototype.writeUInt8 = a(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || G(this, e, t, 1, 255, 0), this[t] = e & 255, t + 1;\n    }, \"writeUInt8\");\n    l.prototype.writeUint16LE = l.prototype.writeUInt16LE = a(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || G(this, e, t, 2, 65535, 0), this[t] = e & 255, this[t + 1] = e >>> 8, t + 2;\n    }, \"writeUInt16LE\");\n    l.prototype.writeUint16BE = l.prototype.writeUInt16BE = a(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || G(this, e, t, 2, 65535, 0), this[t] = e >>> 8, this[t + 1] = e & 255, t + 2;\n    }, \"writeUInt16BE\");\n    l.prototype.writeUint32LE = l.prototype.writeUInt32LE = a(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || G(this, e, t, 4, 4294967295, 0), this[t + 3] = e >>> 24, this[t + 2] = e >>> 16, this[t + 1] = e >>> 8, this[t] = e & 255, t + 4;\n    }, \"writeUInt32LE\");\n    l.prototype.writeUint32BE = l.prototype.writeUInt32BE = a(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || G(this, e, t, 4, 4294967295, 0), this[t] = e >>> 24, this[t + 1] = e >>> 16, this[t + 2] = e >>> 8, this[t + 3] = e & 255, t + 4;\n    }, \"writeUInt32BE\");\n    function qn(r, e, t, n, i) {\n        Hn(e, n, i, r, t, 7);\n        let s = Number(e & BigInt(4294967295));\n        r[t++] = s, s = s >> 8, r[t++] = s, s = s >> 8, r[t++] = s, s = s >> 8, r[t++] = s;\n        let o = Number(e >> BigInt(32) & BigInt(4294967295));\n        return r[t++] = o, o = o >> 8, r[t++] = o, o = o >> 8, r[t++] = o, o = o >> 8, r[t++] = o, t;\n    }\n    a(qn, \"wrtBigUInt64LE\");\n    function Nn(r, e, t, n, i) {\n        Hn(e, n, i, r, t, 7);\n        let s = Number(e & BigInt(4294967295));\n        r[t + 7] = s, s = s >> 8, r[t + 6] = s, s = s >> 8, r[t + 5] = s, s = s >> 8, r[t + 4] = s;\n        let o = Number(e >> BigInt(32) & BigInt(4294967295));\n        return r[t + 3] = o, o = o >> 8, r[t + 2] = o, o = o >> 8, r[t + 1] = o, o = o >> 8, r[t] = o, t + 8;\n    }\n    a(Nn, \"wrtBigUInt64BE\");\n    l.prototype.writeBigUInt64LE = de(a(function(e, t = 0) {\n        return qn(this, e, t, BigInt(0), BigInt(\"0xffffffffffffffff\"));\n    }, \"writeBigUInt64LE\"));\n    l.prototype.writeBigUInt64BE = de(a(function(e, t = 0) {\n        return Nn(this, e, t, BigInt(0), BigInt(\"0xffffffffffffffff\"));\n    }, \"writeBigUInt64BE\"));\n    l.prototype.writeIntLE = a(function(e, t, n, i) {\n        if (e = +e, t = t >>> 0, !i) {\n            let c = Math.pow(2, 8 * n - 1);\n            G(this, e, t, n, c - 1, -c);\n        }\n        let s = 0, o = 1, u = 0;\n        for(this[t] = e & 255; ++s < n && (o *= 256);)e < 0 && u === 0 && this[t + s - 1] !== 0 && (u = 1), this[t + s] = (e / o >> 0) - u & 255;\n        return t + n;\n    }, \"writeIntLE\");\n    l.prototype.writeIntBE = a(function(e, t, n, i) {\n        if (e = +e, t = t >>> 0, !i) {\n            let c = Math.pow(2, 8 * n - 1);\n            G(this, e, t, n, c - 1, -c);\n        }\n        let s = n - 1, o = 1, u = 0;\n        for(this[t + s] = e & 255; --s >= 0 && (o *= 256);)e < 0 && u === 0 && this[t + s + 1] !== 0 && (u = 1), this[t + s] = (e / o >> 0) - u & 255;\n        return t + n;\n    }, \"writeIntBE\");\n    l.prototype.writeInt8 = a(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || G(this, e, t, 1, 127, -128), e < 0 && (e = 255 + e + 1), this[t] = e & 255, t + 1;\n    }, \"writeInt8\");\n    l.prototype.writeInt16LE = a(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || G(this, e, t, 2, 32767, -32768), this[t] = e & 255, this[t + 1] = e >>> 8, t + 2;\n    }, \"writeInt16LE\");\n    l.prototype.writeInt16BE = a(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || G(this, e, t, 2, 32767, -32768), this[t] = e >>> 8, this[t + 1] = e & 255, t + 2;\n    }, \"writeInt16BE\");\n    l.prototype.writeInt32LE = a(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || G(this, e, t, 4, 2147483647, -2147483648), this[t] = e & 255, this[t + 1] = e >>> 8, this[t + 2] = e >>> 16, this[t + 3] = e >>> 24, t + 4;\n    }, \"writeInt32LE\");\n    l.prototype.writeInt32BE = a(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || G(this, e, t, 4, 2147483647, -2147483648), e < 0 && (e = 4294967295 + e + 1), this[t] = e >>> 24, this[t + 1] = e >>> 16, this[t + 2] = e >>> 8, this[t + 3] = e & 255, t + 4;\n    }, \"writeInt32BE\");\n    l.prototype.writeBigInt64LE = de(a(function(e, t = 0) {\n        return qn(this, e, t, -BigInt(\"0x8000000000000000\"), BigInt(\"0x7fffffffffffffff\"));\n    }, \"writeBigInt64LE\"));\n    l.prototype.writeBigInt64BE = de(a(function(e, t = 0) {\n        return Nn(this, e, t, -BigInt(\"0x8000000000000000\"), BigInt(\"0x7fffffffffffffff\"));\n    }, \"writeBigInt64BE\"));\n    function Qn(r, e, t, n, i, s) {\n        if (t + n > r.length) throw new RangeError(\"Index out of range\");\n        if (t < 0) throw new RangeError(\"Index out of range\");\n    }\n    a(Qn, \"checkIEEE754\");\n    function Wn(r, e, t, n, i) {\n        return e = +e, t = t >>> 0, i || Qn(r, e, t, 4, 34028234663852886e22, -34028234663852886e22), Ce.write(r, e, t, n, 23, 4), t + 4;\n    }\n    a(Wn, \"writeFloat\");\n    l.prototype.writeFloatLE = a(function(e, t, n) {\n        return Wn(this, e, t, !0, n);\n    }, \"writeFloatLE\");\n    l.prototype.writeFloatBE = a(function(e, t, n) {\n        return Wn(this, e, t, !1, n);\n    }, \"writeFloatBE\");\n    function jn(r, e, t, n, i) {\n        return e = +e, t = t >>> 0, i || Qn(r, e, t, 8, 17976931348623157e292, -17976931348623157e292), Ce.write(r, e, t, n, 52, 8), t + 8;\n    }\n    a(jn, \"writeDouble\");\n    l.prototype.writeDoubleLE = a(function(e, t, n) {\n        return jn(this, e, t, !0, n);\n    }, \"writeDoubleLE\");\n    l.prototype.writeDoubleBE = a(function(e, t, n) {\n        return jn(this, e, t, !1, n);\n    }, \"writeDoubleBE\");\n    l.prototype.copy = a(function(e, t, n, i) {\n        if (!l.isBuffer(e)) throw new TypeError(\"argument should be a Buffer\");\n        if (n || (n = 0), !i && i !== 0 && (i = this.length), t >= e.length && (t = e.length), t || (t = 0), i > 0 && i < n && (i = n), i === n || e.length === 0 || this.length === 0) return 0;\n        if (t < 0) throw new RangeError(\"targetStart out of bounds\");\n        if (n < 0 || n >= this.length) throw new RangeError(\"Index out of range\");\n        if (i < 0) throw new RangeError(\"sourceEnd out of bounds\");\n        i > this.length && (i = this.length), e.length - t < i - n && (i = e.length - t + n);\n        let s = i - n;\n        return this === e && typeof Uint8Array.prototype.copyWithin == \"function\" ? this.copyWithin(t, n, i) : Uint8Array.prototype.set.call(e, this.subarray(n, i), t), s;\n    }, \"copy\");\n    l.prototype.fill = a(function(e, t, n, i) {\n        if (typeof e == \"string\") {\n            if (typeof t == \"string\" ? (i = t, t = 0, n = this.length) : typeof n == \"string\" && (i = n, n = this.length), i !== void 0 && typeof i != \"string\") throw new TypeError(\"encoding must be a string\");\n            if (typeof i == \"string\" && !l.isEncoding(i)) throw new TypeError(\"Unknown encoding: \" + i);\n            if (e.length === 1) {\n                let o = e.charCodeAt(0);\n                (i === \"utf8\" && o < 128 || i === \"latin1\") && (e = o);\n            }\n        } else typeof e == \"number\" ? e = e & 255 : typeof e == \"boolean\" && (e = Number(e));\n        if (t < 0 || this.length < t || this.length < n) throw new RangeError(\"Out of range index\");\n        if (n <= t) return this;\n        t = t >>> 0, n = n === void 0 ? this.length : n >>> 0, e || (e = 0);\n        let s;\n        if (typeof e == \"number\") for(s = t; s < n; ++s)this[s] = e;\n        else {\n            let o = l.isBuffer(e) ? e : l.from(e, i), u = o.length;\n            if (u === 0) throw new TypeError('The value \"' + e + '\" is invalid for argument \"value\"');\n            for(s = 0; s < n - t; ++s)this[s + t] = o[s % u];\n        }\n        return this;\n    }, \"fill\");\n    var Ae = {};\n    function kt(r, e, t) {\n        var n;\n        Ae[r] = (n = class extends t {\n            constructor(){\n                super(), Object.defineProperty(this, \"message\", {\n                    value: e.apply(this, arguments),\n                    writable: !0,\n                    configurable: !0\n                }), this.name = `${this.name} [${r}]`, this.stack, delete this.name;\n            }\n            get code() {\n                return r;\n            }\n            set code(s) {\n                Object.defineProperty(this, \"code\", {\n                    configurable: !0,\n                    enumerable: !0,\n                    value: s,\n                    writable: !0\n                });\n            }\n            toString() {\n                return `${this.name} [${r}]: ${this.message}`;\n            }\n        }, a(n, \"NodeError\"), n);\n    }\n    a(kt, \"E\");\n    kt(\"ERR_BUFFER_OUT_OF_BOUNDS\", function(r) {\n        return r ? `${r} is outside of buffer bounds` : \"Attempt to access memory outside buffer bounds\";\n    }, RangeError);\n    kt(\"ERR_INVALID_ARG_TYPE\", function(r, e) {\n        return `The \"${r}\" argum\\\nent must be of type number. Received type ${typeof e}`;\n    }, TypeError);\n    kt(\"ERR_OUT_OF_RANGE\", function(r, e, t) {\n        let n = `The value of \"${r}\" is out of range.`, i = t;\n        return Number.isInteger(t) && Math.abs(t) > 2 ** 32 ? i = Fn(String(t)) : typeof t == \"bigint\" && (i = String(t), (t > BigInt(2) ** BigInt(32) || t < -(BigInt(2) ** BigInt(32))) && (i = Fn(i)), i += \"n\"), n += ` It\\\n must be ${e}. Received ${i}`, n;\n    }, RangeError);\n    function Fn(r) {\n        let e = \"\", t = r.length, n = r[0] === \"-\" ? 1 : 0;\n        for(; t >= n + 4; t -= 3)e = `_${r.slice(t - 3, t)}${e}`;\n        return `${r.slice(0, t)}${e}`;\n    }\n    a(Fn, \"addNumericalSeparator\");\n    function Po(r, e, t) {\n        Ie(e, \"offset\"), (r[e] === void 0 || r[e + t] === void 0) && Qe(e, r.length - (t + 1));\n    }\n    a(Po, \"checkBounds\");\n    function Hn(r, e, t, n, i, s) {\n        if (r > t || r < e) {\n            let o = typeof e == \"bigint\" ? \"n\" : \"\", u;\n            throw s > 3 ? e === 0 || e === BigInt(0) ? u = `>= 0${o} and < 2${o} ** ${(s + 1) * 8}${o}` : u = `>= -(2${o} ** ${(s + 1) * 8 - 1}${o}) and \\\n< 2 ** ${(s + 1) * 8 - 1}${o}` : u = `>= ${e}${o} and <= ${t}${o}`, new Ae.ERR_OUT_OF_RANGE(\"value\", u, r);\n        }\n        Po(n, i, s);\n    }\n    a(Hn, \"checkIntBI\");\n    function Ie(r, e) {\n        if (typeof r != \"number\") throw new Ae.ERR_INVALID_ARG_TYPE(e, \"number\", r);\n    }\n    a(Ie, \"validateNumber\");\n    function Qe(r, e, t) {\n        throw Math.floor(r) !== r ? (Ie(r, t), new Ae.ERR_OUT_OF_RANGE(t || \"offset\", \"an integer\", r)) : e < 0 ? new Ae.ERR_BUFFER_OUT_OF_BOUNDS : new Ae.ERR_OUT_OF_RANGE(t || \"offset\", `>= ${t ? 1 : 0} and <= ${e}`, r);\n    }\n    a(Qe, \"boundsError\");\n    var Bo = /[^+/0-9A-Za-z-_]/g;\n    function Lo(r) {\n        if (r = r.split(\"=\")[0], r = r.trim().replace(Bo, \"\"), r.length < 2) return \"\";\n        for(; r.length % 4 !== 0;)r = r + \"=\";\n        return r;\n    }\n    a(Lo, \"base64clean\");\n    function Ft(r, e) {\n        e = e || 1 / 0;\n        let t, n = r.length, i = null, s = [];\n        for(let o = 0; o < n; ++o){\n            if (t = r.charCodeAt(o), t > 55295 && t < 57344) {\n                if (!i) {\n                    if (t > 56319) {\n                        (e -= 3) > -1 && s.push(239, 191, 189);\n                        continue;\n                    } else if (o + 1 === n) {\n                        (e -= 3) > -1 && s.push(239, 191, 189);\n                        continue;\n                    }\n                    i = t;\n                    continue;\n                }\n                if (t < 56320) {\n                    (e -= 3) > -1 && s.push(239, 191, 189), i = t;\n                    continue;\n                }\n                t = (i - 55296 << 10 | t - 56320) + 65536;\n            } else i && (e -= 3) > -1 && s.push(239, 191, 189);\n            if (i = null, t < 128) {\n                if ((e -= 1) < 0) break;\n                s.push(t);\n            } else if (t < 2048) {\n                if ((e -= 2) < 0) break;\n                s.push(t >> 6 | 192, t & 63 | 128);\n            } else if (t < 65536) {\n                if ((e -= 3) < 0) break;\n                s.push(t >> 12 | 224, t >> 6 & 63 | 128, t & 63 | 128);\n            } else if (t < 1114112) {\n                if ((e -= 4) < 0) break;\n                s.push(t >> 18 | 240, t >> 12 & 63 | 128, t >> 6 & 63 | 128, t & 63 | 128);\n            } else throw new Error(\"Invalid code point\");\n        }\n        return s;\n    }\n    a(Ft, \"utf8ToBytes\");\n    function Ro(r) {\n        let e = [];\n        for(let t = 0; t < r.length; ++t)e.push(r.charCodeAt(t) & 255);\n        return e;\n    }\n    a(Ro, \"asciiToBytes\");\n    function Fo(r, e) {\n        let t, n, i, s = [];\n        for(let o = 0; o < r.length && !((e -= 2) < 0); ++o)t = r.charCodeAt(o), n = t >> 8, i = t % 256, s.push(i), s.push(n);\n        return s;\n    }\n    a(Fo, \"utf16leToBytes\");\n    function Gn(r) {\n        return Bt.toByteArray(Lo(r));\n    }\n    a(Gn, \"base64ToBytes\");\n    function st(r, e, t, n) {\n        let i;\n        for(i = 0; i < n && !(i + t >= e.length || i >= r.length); ++i)e[i + t] = r[i];\n        return i;\n    }\n    a(st, \"blitBuffer\");\n    function ae(r, e) {\n        return r instanceof e || r != null && r.constructor != null && r.constructor.name != null && r.constructor.name === e.name;\n    }\n    a(ae, \"isInstance\");\n    function Ut(r) {\n        return r !== r;\n    }\n    a(Ut, \"numberIsNaN\");\n    var Mo = function() {\n        let r = \"0123456789abcdef\", e = new Array(256);\n        for(let t = 0; t < 16; ++t){\n            let n = t * 16;\n            for(let i = 0; i < 16; ++i)e[n + i] = r[t] + r[i];\n        }\n        return e;\n    }();\n    function de(r) {\n        return typeof BigInt > \"u\" ? Do : r;\n    }\n    a(de, \"defineBigIntMethod\");\n    function Do() {\n        throw new Error(\"BigInt not supported\");\n    }\n    a(Do, \"BufferBigIntNotDefined\");\n});\nvar w, b, E, g, d, y, p = W(()=>{\n    \"use strict\";\n    w = globalThis, b = globalThis.setImmediate ?? ((r)=>setTimeout(r, 0)), E = globalThis.clearImmediate ?? ((r)=>clearTimeout(r)), g = globalThis.crypto ?? {};\n    g.subtle ?? (g.subtle = {});\n    d = typeof globalThis.Buffer == \"function\" && typeof globalThis.Buffer.allocUnsafe == \"function\" ? globalThis.Buffer : $n().Buffer, y = globalThis.process ?? {};\n    y.env ?? (y.env = {});\n    try {\n        y.nextTick(()=>{});\n    } catch  {\n        let e = Promise.resolve();\n        y.nextTick = e.then.bind(e);\n    }\n});\nvar Kn = {};\nY(Kn, {\n    parse: ()=>Ot\n});\nfunction Ot(r, e = !1) {\n    let { protocol: t } = new URL(r), n = \"http:\" + r.substring(t.length), { username: i, password: s, host: o, hostname: u, port: c, pathname: h, search: f, searchParams: m, hash: x } = new URL(n);\n    s = decodeURIComponent(s);\n    let _ = i + \":\" + s, P = e ? Object.fromEntries(m.entries()) : f;\n    return {\n        href: r,\n        protocol: t,\n        auth: _,\n        username: i,\n        password: s,\n        host: o,\n        hostname: u,\n        port: c,\n        pathname: h,\n        search: f,\n        query: P,\n        hash: x\n    };\n}\nvar qt = W(()=>{\n    p();\n    a(Ot, \"parse\");\n});\nvar ye = I((Jc, Nt)=>{\n    \"use strict\";\n    p();\n    var Pe = typeof Reflect == \"object\" ? Reflect : null, Vn = Pe && typeof Pe.apply == \"function\" ? Pe.apply : a(function(e, t, n) {\n        return Function.prototype.apply.call(e, t, n);\n    }, \"ReflectApply\"), ot;\n    Pe && typeof Pe.ownKeys == \"function\" ? ot = Pe.ownKeys : Object.getOwnPropertySymbols ? ot = a(function(e) {\n        return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e));\n    }, \"ReflectOwnKeys\") : ot = a(function(e) {\n        return Object.getOwnPropertyNames(e);\n    }, \"ReflectOwnKeys\");\n    function ko(r) {\n        console && console.warn && console.warn(r);\n    }\n    a(ko, \"ProcessEmitWarning\");\n    var Yn = Number.isNaN || a(function(e) {\n        return e !== e;\n    }, \"NumberIsNaN\");\n    function R() {\n        R.init.call(this);\n    }\n    a(R, \"EventEmitter\");\n    Nt.exports = R;\n    Nt.exports.once = No;\n    R.EventEmitter = R;\n    R.prototype._events = void 0;\n    R.prototype._eventsCount = 0;\n    R.prototype._maxListeners = void 0;\n    var zn = 10;\n    function at(r) {\n        if (typeof r != \"function\") throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof r);\n    }\n    a(at, \"checkListener\");\n    Object.defineProperty(R, \"defaultMaxListeners\", {\n        enumerable: !0,\n        get: function() {\n            return zn;\n        },\n        set: function(r) {\n            if (typeof r != \"number\" || r < 0 || Yn(r)) throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + r + \".\");\n            zn = r;\n        }\n    });\n    R.init = function() {\n        (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) && (this._events = Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;\n    };\n    R.prototype.setMaxListeners = a(function(e) {\n        if (typeof e != \"number\" || e < 0 || Yn(e)) throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + e + \".\");\n        return this._maxListeners = e, this;\n    }, \"setMaxListeners\");\n    function Zn(r) {\n        return r._maxListeners === void 0 ? R.defaultMaxListeners : r._maxListeners;\n    }\n    a(Zn, \"_getMaxListeners\");\n    R.prototype.getMaxListeners = a(function() {\n        return Zn(this);\n    }, \"getMaxListeners\");\n    R.prototype.emit = a(function(e) {\n        for(var t = [], n = 1; n < arguments.length; n++)t.push(arguments[n]);\n        var i = e === \"error\", s = this._events;\n        if (s !== void 0) i = i && s.error === void 0;\n        else if (!i) return !1;\n        if (i) {\n            var o;\n            if (t.length > 0 && (o = t[0]), o instanceof Error) throw o;\n            var u = new Error(\"Unhandled error.\" + (o ? \" (\" + o.message + \")\" : \"\"));\n            throw u.context = o, u;\n        }\n        var c = s[e];\n        if (c === void 0) return !1;\n        if (typeof c == \"function\") Vn(c, this, t);\n        else for(var h = c.length, f = ri(c, h), n = 0; n < h; ++n)Vn(f[n], this, t);\n        return !0;\n    }, \"emit\");\n    function Jn(r, e, t, n) {\n        var i, s, o;\n        if (at(t), s = r._events, s === void 0 ? (s = r._events = Object.create(null), r._eventsCount = 0) : (s.newListener !== void 0 && (r.emit(\"newListener\", e, t.listener ? t.listener : t), s = r._events), o = s[e]), o === void 0) o = s[e] = t, ++r._eventsCount;\n        else if (typeof o == \"function\" ? o = s[e] = n ? [\n            t,\n            o\n        ] : [\n            o,\n            t\n        ] : n ? o.unshift(t) : o.push(t), i = Zn(r), i > 0 && o.length > i && !o.warned) {\n            o.warned = !0;\n            var u = new Error(\"Possible EventEmitter memory leak detected. \" + o.length + \" \" + String(e) + \" listeners added. Use emitter.setMaxListeners() to increase limit\");\n            u.name = \"MaxListenersExceededWarning\", u.emitter = r, u.type = e, u.count = o.length, ko(u);\n        }\n        return r;\n    }\n    a(Jn, \"_addListener\");\n    R.prototype.addListener = a(function(e, t) {\n        return Jn(this, e, t, !1);\n    }, \"addListener\");\n    R.prototype.on = R.prototype.addListener;\n    R.prototype.prependListener = a(function(e, t) {\n        return Jn(this, e, t, !0);\n    }, \"prependListener\");\n    function Uo() {\n        if (!this.fired) return this.target.removeListener(this.type, this.wrapFn), this.fired = !0, arguments.length === 0 ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);\n    }\n    a(Uo, \"onceWrapper\");\n    function Xn(r, e, t) {\n        var n = {\n            fired: !1,\n            wrapFn: void 0,\n            target: r,\n            type: e,\n            listener: t\n        }, i = Uo.bind(n);\n        return i.listener = t, n.wrapFn = i, i;\n    }\n    a(Xn, \"_onceWrap\");\n    R.prototype.once = a(function(e, t) {\n        return at(t), this.on(e, Xn(this, e, t)), this;\n    }, \"once\");\n    R.prototype.prependOnceListener = a(function(e, t) {\n        return at(t), this.prependListener(e, Xn(this, e, t)), this;\n    }, \"prependOnceListener\");\n    R.prototype.removeListener = a(function(e, t) {\n        var n, i, s, o, u;\n        if (at(t), i = this._events, i === void 0) return this;\n        if (n = i[e], n === void 0) return this;\n        if (n === t || n.listener === t) --this._eventsCount === 0 ? this._events = Object.create(null) : (delete i[e], i.removeListener && this.emit(\"removeListener\", e, n.listener || t));\n        else if (typeof n != \"function\") {\n            for(s = -1, o = n.length - 1; o >= 0; o--)if (n[o] === t || n[o].listener === t) {\n                u = n[o].listener, s = o;\n                break;\n            }\n            if (s < 0) return this;\n            s === 0 ? n.shift() : Oo(n, s), n.length === 1 && (i[e] = n[0]), i.removeListener !== void 0 && this.emit(\"removeListener\", e, u || t);\n        }\n        return this;\n    }, \"removeListener\");\n    R.prototype.off = R.prototype.removeListener;\n    R.prototype.removeAllListeners = a(function(e) {\n        var t, n, i;\n        if (n = this._events, n === void 0) return this;\n        if (n.removeListener === void 0) return arguments.length === 0 ? (this._events = Object.create(null), this._eventsCount = 0) : n[e] !== void 0 && (--this._eventsCount === 0 ? this._events = Object.create(null) : delete n[e]), this;\n        if (arguments.length === 0) {\n            var s = Object.keys(n), o;\n            for(i = 0; i < s.length; ++i)o = s[i], o !== \"removeListener\" && this.removeAllListeners(o);\n            return this.removeAllListeners(\"removeListener\"), this._events = Object.create(null), this._eventsCount = 0, this;\n        }\n        if (t = n[e], typeof t == \"function\") this.removeListener(e, t);\n        else if (t !== void 0) for(i = t.length - 1; i >= 0; i--)this.removeListener(e, t[i]);\n        return this;\n    }, \"removeAllListeners\");\n    function ei(r, e, t) {\n        var n = r._events;\n        if (n === void 0) return [];\n        var i = n[e];\n        return i === void 0 ? [] : typeof i == \"function\" ? t ? [\n            i.listener || i\n        ] : [\n            i\n        ] : t ? qo(i) : ri(i, i.length);\n    }\n    a(ei, \"_listeners\");\n    R.prototype.listeners = a(function(e) {\n        return ei(this, e, !0);\n    }, \"listeners\");\n    R.prototype.rawListeners = a(function(e) {\n        return ei(this, e, !1);\n    }, \"rawListeners\");\n    R.listenerCount = function(r, e) {\n        return typeof r.listenerCount == \"function\" ? r.listenerCount(e) : ti.call(r, e);\n    };\n    R.prototype.listenerCount = ti;\n    function ti(r) {\n        var e = this._events;\n        if (e !== void 0) {\n            var t = e[r];\n            if (typeof t == \"function\") return 1;\n            if (t !== void 0) return t.length;\n        }\n        return 0;\n    }\n    a(ti, \"listenerCount\");\n    R.prototype.eventNames = a(function() {\n        return this._eventsCount > 0 ? ot(this._events) : [];\n    }, \"eventNames\");\n    function ri(r, e) {\n        for(var t = new Array(e), n = 0; n < e; ++n)t[n] = r[n];\n        return t;\n    }\n    a(ri, \"arrayClone\");\n    function Oo(r, e) {\n        for(; e + 1 < r.length; e++)r[e] = r[e + 1];\n        r.pop();\n    }\n    a(Oo, \"spliceOne\");\n    function qo(r) {\n        for(var e = new Array(r.length), t = 0; t < e.length; ++t)e[t] = r[t].listener || r[t];\n        return e;\n    }\n    a(qo, \"unwrapListeners\");\n    function No(r, e) {\n        return new Promise(function(t, n) {\n            function i(o) {\n                r.removeListener(e, s), n(o);\n            }\n            a(i, \"errorListener\");\n            function s() {\n                typeof r.removeListener == \"function\" && r.removeListener(\"error\", i), t([].slice.call(arguments));\n            }\n            a(s, \"resolver\"), ni(r, e, s, {\n                once: !0\n            }), e !== \"error\" && Qo(r, i, {\n                once: !0\n            });\n        });\n    }\n    a(No, \"once\");\n    function Qo(r, e, t) {\n        typeof r.on == \"function\" && ni(r, \"error\", e, t);\n    }\n    a(Qo, \"addErrorHandlerIfEventEmitter\");\n    function ni(r, e, t, n) {\n        if (typeof r.on == \"function\") n.once ? r.once(e, t) : r.on(e, t);\n        else if (typeof r.addEventListener == \"function\") r.addEventListener(e, a(function i(s) {\n            n.once && r.removeEventListener(e, i), t(s);\n        }, \"wrapListener\"));\n        else throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof r);\n    }\n    a(ni, \"eventTargetAgnosticAddListener\");\n});\nvar si = {};\nY(si, {\n    Socket: ()=>me,\n    isIP: ()=>Wo\n});\nfunction Wo(r) {\n    return 0;\n}\nvar ii, S, me, ut = W(()=>{\n    \"use strict\";\n    p();\n    ii = Ne(ye(), 1);\n    a(Wo, \"isIP\");\n    S = class S extends ii.EventEmitter {\n        constructor(){\n            super(...arguments);\n            T(this, \"opts\", {});\n            T(this, \"connecting\", !1);\n            T(this, \"pending\", !0);\n            T(this, \"writable\", !0);\n            T(this, \"encrypted\", !1);\n            T(this, \"authorized\", !1);\n            T(this, \"destroyed\", !1);\n            T(this, \"ws\", null);\n            T(this, \"writeBuffer\");\n            T(this, \"tlsState\", 0);\n            T(this, \"tlsRead\");\n            T(this, \"tlsWrite\");\n        }\n        static get poolQueryViaFetch() {\n            return S.opts.poolQueryViaFetch ?? S.defaults.poolQueryViaFetch;\n        }\n        static set poolQueryViaFetch(t) {\n            S.opts.poolQueryViaFetch = t;\n        }\n        static get fetchEndpoint() {\n            return S.opts.fetchEndpoint ?? S.defaults.fetchEndpoint;\n        }\n        static set fetchEndpoint(t) {\n            S.opts.fetchEndpoint = t;\n        }\n        static get fetchConnectionCache() {\n            return S.opts.fetchConnectionCache ?? S.defaults.fetchConnectionCache;\n        }\n        static set fetchConnectionCache(t) {\n            S.opts.fetchConnectionCache = t;\n        }\n        static get fetchFunction() {\n            return S.opts.fetchFunction ?? S.defaults.fetchFunction;\n        }\n        static set fetchFunction(t) {\n            S.opts.fetchFunction = t;\n        }\n        static get webSocketConstructor() {\n            return S.opts.webSocketConstructor ?? S.defaults.webSocketConstructor;\n        }\n        static set webSocketConstructor(t) {\n            S.opts.webSocketConstructor = t;\n        }\n        get webSocketConstructor() {\n            return this.opts.webSocketConstructor ?? S.webSocketConstructor;\n        }\n        set webSocketConstructor(t) {\n            this.opts.webSocketConstructor = t;\n        }\n        static get wsProxy() {\n            return S.opts.wsProxy ?? S.defaults.wsProxy;\n        }\n        static set wsProxy(t) {\n            S.opts.wsProxy = t;\n        }\n        get wsProxy() {\n            return this.opts.wsProxy ?? S.wsProxy;\n        }\n        set wsProxy(t) {\n            this.opts.wsProxy = t;\n        }\n        static get coalesceWrites() {\n            return S.opts.coalesceWrites ?? S.defaults.coalesceWrites;\n        }\n        static set coalesceWrites(t) {\n            S.opts.coalesceWrites = t;\n        }\n        get coalesceWrites() {\n            return this.opts.coalesceWrites ?? S.coalesceWrites;\n        }\n        set coalesceWrites(t) {\n            this.opts.coalesceWrites = t;\n        }\n        static get useSecureWebSocket() {\n            return S.opts.useSecureWebSocket ?? S.defaults.useSecureWebSocket;\n        }\n        static set useSecureWebSocket(t) {\n            S.opts.useSecureWebSocket = t;\n        }\n        get useSecureWebSocket() {\n            return this.opts.useSecureWebSocket ?? S.useSecureWebSocket;\n        }\n        set useSecureWebSocket(t) {\n            this.opts.useSecureWebSocket = t;\n        }\n        static get forceDisablePgSSL() {\n            return S.opts.forceDisablePgSSL ?? S.defaults.forceDisablePgSSL;\n        }\n        static set forceDisablePgSSL(t) {\n            S.opts.forceDisablePgSSL = t;\n        }\n        get forceDisablePgSSL() {\n            return this.opts.forceDisablePgSSL ?? S.forceDisablePgSSL;\n        }\n        set forceDisablePgSSL(t) {\n            this.opts.forceDisablePgSSL = t;\n        }\n        static get disableSNI() {\n            return S.opts.disableSNI ?? S.defaults.disableSNI;\n        }\n        static set disableSNI(t) {\n            S.opts.disableSNI = t;\n        }\n        get disableSNI() {\n            return this.opts.disableSNI ?? S.disableSNI;\n        }\n        set disableSNI(t) {\n            this.opts.disableSNI = t;\n        }\n        static get pipelineConnect() {\n            return S.opts.pipelineConnect ?? S.defaults.pipelineConnect;\n        }\n        static set pipelineConnect(t) {\n            S.opts.pipelineConnect = t;\n        }\n        get pipelineConnect() {\n            return this.opts.pipelineConnect ?? S.pipelineConnect;\n        }\n        set pipelineConnect(t) {\n            this.opts.pipelineConnect = t;\n        }\n        static get subtls() {\n            return S.opts.subtls ?? S.defaults.subtls;\n        }\n        static set subtls(t) {\n            S.opts.subtls = t;\n        }\n        get subtls() {\n            return this.opts.subtls ?? S.subtls;\n        }\n        set subtls(t) {\n            this.opts.subtls = t;\n        }\n        static get pipelineTLS() {\n            return S.opts.pipelineTLS ?? S.defaults.pipelineTLS;\n        }\n        static set pipelineTLS(t) {\n            S.opts.pipelineTLS = t;\n        }\n        get pipelineTLS() {\n            return this.opts.pipelineTLS ?? S.pipelineTLS;\n        }\n        set pipelineTLS(t) {\n            this.opts.pipelineTLS = t;\n        }\n        static get rootCerts() {\n            return S.opts.rootCerts ?? S.defaults.rootCerts;\n        }\n        static set rootCerts(t) {\n            S.opts.rootCerts = t;\n        }\n        get rootCerts() {\n            return this.opts.rootCerts ?? S.rootCerts;\n        }\n        set rootCerts(t) {\n            this.opts.rootCerts = t;\n        }\n        wsProxyAddrForHost(t, n) {\n            let i = this.wsProxy;\n            if (i === void 0) throw new Error(\"No WebSocket proxy is configured. Please refer to https://github.com/neondatabase/serverless#run-your-own-websocket-proxy\");\n            return typeof i == \"function\" ? i(t, n) : `${i}?address=${t}:${n}`;\n        }\n        setNoDelay() {\n            return this;\n        }\n        setKeepAlive() {\n            return this;\n        }\n        ref() {\n            return this;\n        }\n        unref() {\n            return this;\n        }\n        async connect(t, n, i) {\n            this.connecting = !0, i && this.once(\"connect\", i);\n            let s;\n            try {\n                s = this.wsProxyAddrForHost(n, typeof t == \"string\" ? parseInt(t, 10) : t);\n            } catch (o) {\n                this.emit(\"error\", o), this.emit(\"close\");\n                return;\n            }\n            return this.ws = await new Promise(async (o)=>{\n                try {\n                    let c = (this.useSecureWebSocket ? \"wss:\" : \"ws:\") + \"//\" + s, h;\n                    if (this.webSocketConstructor !== void 0) h = new this.webSocketConstructor(c);\n                    else try {\n                        h = new WebSocket(c);\n                    } catch  {\n                        h = new __unstable_WebSocket(c);\n                    }\n                    h.addEventListener(\"open\", ()=>{\n                        o(h);\n                    });\n                } catch (u) {\n                    try {\n                        let h = (this.useSecureWebSocket ? \"https:\" : \"http:\") + \"//\" + s;\n                        await fetch(h, {\n                            headers: {\n                                Upgrade: \"websocket\"\n                            }\n                        }).then((f)=>{\n                            let m = f.webSocket;\n                            if (m == null) throw u;\n                            m.accept(), o(m);\n                        });\n                    } catch  {\n                        this.emit(\"error\", new Error(\"All attempts to open a WebSocket to connect to the database failed. Please refer to https://github.com/neondatabase/serverless#run-on-node\")), this.emit(\"close\");\n                        return;\n                    }\n                }\n            }), this.ws.binaryType = \"arraybuffer\", this.ws.addEventListener(\"error\", (o)=>{\n                this.emit(\"error\", o), this.emit(\"close\");\n            }), this.ws.addEventListener(\"close\", ()=>{\n                this.emit(\"close\");\n            }), this.ws.addEventListener(\"message\", (o)=>{\n                if (this.tlsState === 0) {\n                    let u = d.from(o.data);\n                    this.emit(\"data\", u);\n                }\n            }), this.connecting = !1, this.pending = !1, this.emit(\"connect\"), this.emit(\"ready\"), this;\n        }\n        async startTls(t) {\n            if (this.subtls === void 0) throw new Error(\"For Postgres SSL connections, you must set `neonConfig.subtls` to the subtls library. See https://github.com/neondatabase/serverless/blob/main/CONFIG.md for more information.\");\n            this.tlsState = 1;\n            let n = this.subtls.TrustedCert.fromPEM(this.rootCerts), i = new this.subtls.WebSocketReadQueue(this.ws), s = i.read.bind(i), o = this.rawWrite.bind(this), [u, c] = await this.subtls.startTls(t, n, s, o, {\n                useSNI: !this.disableSNI,\n                expectPreData: this.pipelineTLS ? new Uint8Array([\n                    83\n                ]) : void 0\n            });\n            this.tlsRead = u, this.tlsWrite = c, this.tlsState = 2, this.encrypted = !0, this.authorized = !0, this.emit(\"secureConnection\", this), this.tlsReadLoop();\n        }\n        async tlsReadLoop() {\n            for(;;){\n                let t = await this.tlsRead();\n                if (t === void 0) break;\n                {\n                    let n = d.from(t);\n                    this.emit(\"data\", n);\n                }\n            }\n        }\n        rawWrite(t) {\n            if (!this.coalesceWrites) {\n                this.ws.send(t);\n                return;\n            }\n            if (this.writeBuffer === void 0) this.writeBuffer = t, setTimeout(()=>{\n                this.ws.send(this.writeBuffer), this.writeBuffer = void 0;\n            }, 0);\n            else {\n                let n = new Uint8Array(this.writeBuffer.length + t.length);\n                n.set(this.writeBuffer), n.set(t, this.writeBuffer.length), this.writeBuffer = n;\n            }\n        }\n        write(t, n = \"utf8\", i = (s)=>{}) {\n            return t.length === 0 ? i() : (typeof t == \"string\" && (t = d.from(t, n)), this.tlsState === 0 ? this.rawWrite(t) : this.tlsState === 1 ? this.once(\"secureConnection\", ()=>this.write(t, n, i)) : this.tlsWrite(t), !0);\n        }\n        end(t = d.alloc(0), n = \"utf8\", i) {\n            return this.write(t, n, ()=>{\n                this.ws.close(), i && i();\n            }), this;\n        }\n        destroy() {\n            return this.destroyed = !0, this.end();\n        }\n    };\n    a(S, \"Socket\"), T(S, \"defaults\", {\n        poolQueryViaFetch: !1,\n        fetchEndpoint: (t)=>\"https://\" + t + \"/sql\",\n        fetchConnectionCache: !1,\n        fetchFunction: void 0,\n        webSocketConstructor: void 0,\n        wsProxy: (t)=>t + \"/v2\",\n        useSecureWebSocket: !0,\n        forceDisablePgSSL: !0,\n        coalesceWrites: !0,\n        pipelineConnect: \"password\",\n        subtls: void 0,\n        rootCerts: \"\",\n        pipelineTLS: !1,\n        disableSNI: !1\n    }), T(S, \"opts\", {});\n    me = S;\n});\nfunction We(r) {\n    let e = 1779033703, t = 3144134277, n = 1013904242, i = 2773480762, s = 1359893119, o = 2600822924, u = 528734635, c = 1541459225, h = 0, f = 0, m = [\n        1116352408,\n        1899447441,\n        3049323471,\n        3921009573,\n        961987163,\n        1508970993,\n        2453635748,\n        2870763221,\n        3624381080,\n        310598401,\n        607225278,\n        1426881987,\n        1925078388,\n        2162078206,\n        2614888103,\n        3248222580,\n        3835390401,\n        4022224774,\n        264347078,\n        604807628,\n        770255983,\n        1249150122,\n        1555081692,\n        1996064986,\n        2554220882,\n        2821834349,\n        2952996808,\n        3210313671,\n        3336571891,\n        3584528711,\n        113926993,\n        338241895,\n        666307205,\n        773529912,\n        1294757372,\n        1396182291,\n        1695183700,\n        1986661051,\n        2177026350,\n        2456956037,\n        2730485921,\n        2820302411,\n        3259730800,\n        3345764771,\n        3516065817,\n        3600352804,\n        4094571909,\n        275423344,\n        430227734,\n        506948616,\n        659060556,\n        883997877,\n        958139571,\n        1322822218,\n        1537002063,\n        1747873779,\n        1955562222,\n        2024104815,\n        2227730452,\n        2361852424,\n        2428436474,\n        2756734187,\n        3204031479,\n        3329325298\n    ], x = a((B, v)=>B >>> v | B << 32 - v, \"rrot\"), _ = new Uint32Array(64), P = new Uint8Array(64), k = a(()=>{\n        for(let L = 0, C = 0; L < 16; L++, C += 4)_[L] = P[C] << 24 | P[C + 1] << 16 | P[C + 2] << 8 | P[C + 3];\n        for(let L = 16; L < 64; L++){\n            let C = x(_[L - 15], 7) ^ x(_[L - 15], 18) ^ _[L - 15] >>> 3, H = x(_[L - 2], 17) ^ x(_[L - 2], 19) ^ _[L - 2] >>> 10;\n            _[L] = _[L - 16] + C + _[L - 7] + H | 0;\n        }\n        let B = e, v = t, te = n, be = i, Z = s, pe = o, re = u, ie = c;\n        for(let L = 0; L < 64; L++){\n            let C = x(Z, 6) ^ x(Z, 11) ^ x(Z, 25), H = Z & pe ^ ~Z & re, ce = ie + C + H + m[L] + _[L] | 0, se = x(B, 2) ^ x(B, 13) ^ x(B, 22), ne = B & v ^ B & te ^ v & te, he = se + ne | 0;\n            ie = re, re = pe, pe = Z, Z = be + ce | 0, be = te, te = v, v = B, B = ce + he | 0;\n        }\n        e = e + B | 0, t = t + v | 0, n = n + te | 0, i = i + be | 0, s = s + Z | 0, o = o + pe | 0, u = u + re | 0, c = c + ie | 0, f = 0;\n    }, \"process\"), z = a((B)=>{\n        typeof B == \"string\" && (B = new TextEncoder().encode(B));\n        for(let v = 0; v < B.length; v++)P[f++] = B[v], f === 64 && k();\n        h += B.length;\n    }, \"add\"), ue = a(()=>{\n        if (P[f++] = 128, f == 64 && k(), f + 8 > 64) {\n            for(; f < 64;)P[f++] = 0;\n            k();\n        }\n        for(; f < 58;)P[f++] = 0;\n        let B = h * 8;\n        P[f++] = B / 1099511627776 & 255, P[f++] = B / 4294967296 & 255, P[f++] = B >>> 24, P[f++] = B >>> 16 & 255, P[f++] = B >>> 8 & 255, P[f++] = B & 255, k();\n        let v = new Uint8Array(32);\n        return v[0] = e >>> 24, v[1] = e >>> 16 & 255, v[2] = e >>> 8 & 255, v[3] = e & 255, v[4] = t >>> 24, v[5] = t >>> 16 & 255, v[6] = t >>> 8 & 255, v[7] = t & 255, v[8] = n >>> 24, v[9] = n >>> 16 & 255, v[10] = n >>> 8 & 255, v[11] = n & 255, v[12] = i >>> 24, v[13] = i >>> 16 & 255, v[14] = i >>> 8 & 255, v[15] = i & 255, v[16] = s >>> 24, v[17] = s >>> 16 & 255, v[18] = s >>> 8 & 255, v[19] = s & 255, v[20] = o >>> 24, v[21] = o >>> 16 & 255, v[22] = o >>> 8 & 255, v[23] = o & 255, v[24] = u >>> 24, v[25] = u >>> 16 & 255, v[26] = u >>> 8 & 255, v[27] = u & 255, v[28] = c >>> 24, v[29] = c >>> 16 & 255, v[30] = c >>> 8 & 255, v[31] = c & 255, v;\n    }, \"digest\");\n    return r === void 0 ? {\n        add: z,\n        digest: ue\n    } : (z(r), ue());\n}\nvar oi = W(()=>{\n    \"use strict\";\n    p();\n    a(We, \"sha256\");\n});\nvar O, je, ai = W(()=>{\n    \"use strict\";\n    p();\n    O = class O {\n        constructor(){\n            T(this, \"_dataLength\", 0);\n            T(this, \"_bufferLength\", 0);\n            T(this, \"_state\", new Int32Array(4));\n            T(this, \"_buffer\", new ArrayBuffer(68));\n            T(this, \"_buffer8\");\n            T(this, \"_buffer32\");\n            this._buffer8 = new Uint8Array(this._buffer, 0, 68), this._buffer32 = new Uint32Array(this._buffer, 0, 17), this.start();\n        }\n        static hashByteArray(e, t = !1) {\n            return this.onePassHasher.start().appendByteArray(e).end(t);\n        }\n        static hashStr(e, t = !1) {\n            return this.onePassHasher.start().appendStr(e).end(t);\n        }\n        static hashAsciiStr(e, t = !1) {\n            return this.onePassHasher.start().appendAsciiStr(e).end(t);\n        }\n        static _hex(e) {\n            let t = O.hexChars, n = O.hexOut, i, s, o, u;\n            for(u = 0; u < 4; u += 1)for(s = u * 8, i = e[u], o = 0; o < 8; o += 2)n[s + 1 + o] = t.charAt(i & 15), i >>>= 4, n[s + 0 + o] = t.charAt(i & 15), i >>>= 4;\n            return n.join(\"\");\n        }\n        static _md5cycle(e, t) {\n            let n = e[0], i = e[1], s = e[2], o = e[3];\n            n += (i & s | ~i & o) + t[0] - 680876936 | 0, n = (n << 7 | n >>> 25) + i | 0, o += (n & i | ~n & s) + t[1] - 389564586 | 0, o = (o << 12 | o >>> 20) + n | 0, s += (o & n | ~o & i) + t[2] + 606105819 | 0, s = (s << 17 | s >>> 15) + o | 0, i += (s & o | ~s & n) + t[3] - 1044525330 | 0, i = (i << 22 | i >>> 10) + s | 0, n += (i & s | ~i & o) + t[4] - 176418897 | 0, n = (n << 7 | n >>> 25) + i | 0, o += (n & i | ~n & s) + t[5] + 1200080426 | 0, o = (o << 12 | o >>> 20) + n | 0, s += (o & n | ~o & i) + t[6] - 1473231341 | 0, s = (s << 17 | s >>> 15) + o | 0, i += (s & o | ~s & n) + t[7] - 45705983 | 0, i = (i << 22 | i >>> 10) + s | 0, n += (i & s | ~i & o) + t[8] + 1770035416 | 0, n = (n << 7 | n >>> 25) + i | 0, o += (n & i | ~n & s) + t[9] - 1958414417 | 0, o = (o << 12 | o >>> 20) + n | 0, s += (o & n | ~o & i) + t[10] - 42063 | 0, s = (s << 17 | s >>> 15) + o | 0, i += (s & o | ~s & n) + t[11] - 1990404162 | 0, i = (i << 22 | i >>> 10) + s | 0, n += (i & s | ~i & o) + t[12] + 1804603682 | 0, n = (n << 7 | n >>> 25) + i | 0, o += (n & i | ~n & s) + t[13] - 40341101 | 0, o = (o << 12 | o >>> 20) + n | 0, s += (o & n | ~o & i) + t[14] - 1502002290 | 0, s = (s << 17 | s >>> 15) + o | 0, i += (s & o | ~s & n) + t[15] + 1236535329 | 0, i = (i << 22 | i >>> 10) + s | 0, n += (i & o | s & ~o) + t[1] - 165796510 | 0, n = (n << 5 | n >>> 27) + i | 0, o += (n & s | i & ~s) + t[6] - 1069501632 | 0, o = (o << 9 | o >>> 23) + n | 0, s += (o & i | n & ~i) + t[11] + 643717713 | 0, s = (s << 14 | s >>> 18) + o | 0, i += (s & n | o & ~n) + t[0] - 373897302 | 0, i = (i << 20 | i >>> 12) + s | 0, n += (i & o | s & ~o) + t[5] - 701558691 | 0, n = (n << 5 | n >>> 27) + i | 0, o += (n & s | i & ~s) + t[10] + 38016083 | 0, o = (o << 9 | o >>> 23) + n | 0, s += (o & i | n & ~i) + t[15] - 660478335 | 0, s = (s << 14 | s >>> 18) + o | 0, i += (s & n | o & ~n) + t[4] - 405537848 | 0, i = (i << 20 | i >>> 12) + s | 0, n += (i & o | s & ~o) + t[9] + 568446438 | 0, n = (n << 5 | n >>> 27) + i | 0, o += (n & s | i & ~s) + t[14] - 1019803690 | 0, o = (o << 9 | o >>> 23) + n | 0, s += (o & i | n & ~i) + t[3] - 187363961 | 0, s = (s << 14 | s >>> 18) + o | 0, i += (s & n | o & ~n) + t[8] + 1163531501 | 0, i = (i << 20 | i >>> 12) + s | 0, n += (i & o | s & ~o) + t[13] - 1444681467 | 0, n = (n << 5 | n >>> 27) + i | 0, o += (n & s | i & ~s) + t[2] - 51403784 | 0, o = (o << 9 | o >>> 23) + n | 0, s += (o & i | n & ~i) + t[7] + 1735328473 | 0, s = (s << 14 | s >>> 18) + o | 0, i += (s & n | o & ~n) + t[12] - 1926607734 | 0, i = (i << 20 | i >>> 12) + s | 0, n += (i ^ s ^ o) + t[5] - 378558 | 0, n = (n << 4 | n >>> 28) + i | 0, o += (n ^ i ^ s) + t[8] - 2022574463 | 0, o = (o << 11 | o >>> 21) + n | 0, s += (o ^ n ^ i) + t[11] + 1839030562 | 0, s = (s << 16 | s >>> 16) + o | 0, i += (s ^ o ^ n) + t[14] - 35309556 | 0, i = (i << 23 | i >>> 9) + s | 0, n += (i ^ s ^ o) + t[1] - 1530992060 | 0, n = (n << 4 | n >>> 28) + i | 0, o += (n ^ i ^ s) + t[4] + 1272893353 | 0, o = (o << 11 | o >>> 21) + n | 0, s += (o ^ n ^ i) + t[7] - 155497632 | 0, s = (s << 16 | s >>> 16) + o | 0, i += (s ^ o ^ n) + t[10] - 1094730640 | 0, i = (i << 23 | i >>> 9) + s | 0, n += (i ^ s ^ o) + t[13] + 681279174 | 0, n = (n << 4 | n >>> 28) + i | 0, o += (n ^ i ^ s) + t[0] - 358537222 | 0, o = (o << 11 | o >>> 21) + n | 0, s += (o ^ n ^ i) + t[3] - 722521979 | 0, s = (s << 16 | s >>> 16) + o | 0, i += (s ^ o ^ n) + t[6] + 76029189 | 0, i = (i << 23 | i >>> 9) + s | 0, n += (i ^ s ^ o) + t[9] - 640364487 | 0, n = (n << 4 | n >>> 28) + i | 0, o += (n ^ i ^ s) + t[12] - 421815835 | 0, o = (o << 11 | o >>> 21) + n | 0, s += (o ^ n ^ i) + t[15] + 530742520 | 0, s = (s << 16 | s >>> 16) + o | 0, i += (s ^ o ^ n) + t[2] - 995338651 | 0, i = (i << 23 | i >>> 9) + s | 0, n += (s ^ (i | ~o)) + t[0] - 198630844 | 0, n = (n << 6 | n >>> 26) + i | 0, o += (i ^ (n | ~s)) + t[7] + 1126891415 | 0, o = (o << 10 | o >>> 22) + n | 0, s += (n ^ (o | ~i)) + t[14] - 1416354905 | 0, s = (s << 15 | s >>> 17) + o | 0, i += (o ^ (s | ~n)) + t[5] - 57434055 | 0, i = (i << 21 | i >>> 11) + s | 0, n += (s ^ (i | ~o)) + t[12] + 1700485571 | 0, n = (n << 6 | n >>> 26) + i | 0, o += (i ^ (n | ~s)) + t[3] - 1894986606 | 0, o = (o << 10 | o >>> 22) + n | 0, s += (n ^ (o | ~i)) + t[10] - 1051523 | 0, s = (s << 15 | s >>> 17) + o | 0, i += (o ^ (s | ~n)) + t[1] - 2054922799 | 0, i = (i << 21 | i >>> 11) + s | 0, n += (s ^ (i | ~o)) + t[8] + 1873313359 | 0, n = (n << 6 | n >>> 26) + i | 0, o += (i ^ (n | ~s)) + t[15] - 30611744 | 0, o = (o << 10 | o >>> 22) + n | 0, s += (n ^ (o | ~i)) + t[6] - 1560198380 | 0, s = (s << 15 | s >>> 17) + o | 0, i += (o ^ (s | ~n)) + t[13] + 1309151649 | 0, i = (i << 21 | i >>> 11) + s | 0, n += (s ^ (i | ~o)) + t[4] - 145523070 | 0, n = (n << 6 | n >>> 26) + i | 0, o += (i ^ (n | ~s)) + t[11] - 1120210379 | 0, o = (o << 10 | o >>> 22) + n | 0, s += (n ^ (o | ~i)) + t[2] + 718787259 | 0, s = (s << 15 | s >>> 17) + o | 0, i += (o ^ (s | ~n)) + t[9] - 343485551 | 0, i = (i << 21 | i >>> 11) + s | 0, e[0] = n + e[0] | 0, e[1] = i + e[1] | 0, e[2] = s + e[2] | 0, e[3] = o + e[3] | 0;\n        }\n        start() {\n            return this._dataLength = 0, this._bufferLength = 0, this._state.set(O.stateIdentity), this;\n        }\n        appendStr(e) {\n            let t = this._buffer8, n = this._buffer32, i = this._bufferLength, s, o;\n            for(o = 0; o < e.length; o += 1){\n                if (s = e.charCodeAt(o), s < 128) t[i++] = s;\n                else if (s < 2048) t[i++] = (s >>> 6) + 192, t[i++] = s & 63 | 128;\n                else if (s < 55296 || s > 56319) t[i++] = (s >>> 12) + 224, t[i++] = s >>> 6 & 63 | 128, t[i++] = s & 63 | 128;\n                else {\n                    if (s = (s - 55296) * 1024 + (e.charCodeAt(++o) - 56320) + 65536, s > 1114111) throw new Error(\"Unicode standard supports code points up to U+10FFFF\");\n                    t[i++] = (s >>> 18) + 240, t[i++] = s >>> 12 & 63 | 128, t[i++] = s >>> 6 & 63 | 128, t[i++] = s & 63 | 128;\n                }\n                i >= 64 && (this._dataLength += 64, O._md5cycle(this._state, n), i -= 64, n[0] = n[16]);\n            }\n            return this._bufferLength = i, this;\n        }\n        appendAsciiStr(e) {\n            let t = this._buffer8, n = this._buffer32, i = this._bufferLength, s, o = 0;\n            for(;;){\n                for(s = Math.min(e.length - o, 64 - i); s--;)t[i++] = e.charCodeAt(o++);\n                if (i < 64) break;\n                this._dataLength += 64, O._md5cycle(this._state, n), i = 0;\n            }\n            return this._bufferLength = i, this;\n        }\n        appendByteArray(e) {\n            let t = this._buffer8, n = this._buffer32, i = this._bufferLength, s, o = 0;\n            for(;;){\n                for(s = Math.min(e.length - o, 64 - i); s--;)t[i++] = e[o++];\n                if (i < 64) break;\n                this._dataLength += 64, O._md5cycle(this._state, n), i = 0;\n            }\n            return this._bufferLength = i, this;\n        }\n        getState() {\n            let e = this._state;\n            return {\n                buffer: String.fromCharCode.apply(null, Array.from(this._buffer8)),\n                buflen: this._bufferLength,\n                length: this._dataLength,\n                state: [\n                    e[0],\n                    e[1],\n                    e[2],\n                    e[3]\n                ]\n            };\n        }\n        setState(e) {\n            let t = e.buffer, n = e.state, i = this._state, s;\n            for(this._dataLength = e.length, this._bufferLength = e.buflen, i[0] = n[0], i[1] = n[1], i[2] = n[2], i[3] = n[3], s = 0; s < t.length; s += 1)this._buffer8[s] = t.charCodeAt(s);\n        }\n        end(e = !1) {\n            let t = this._bufferLength, n = this._buffer8, i = this._buffer32, s = (t >> 2) + 1;\n            this._dataLength += t;\n            let o = this._dataLength * 8;\n            if (n[t] = 128, n[t + 1] = n[t + 2] = n[t + 3] = 0, i.set(O.buffer32Identity.subarray(s), s), t > 55 && (O._md5cycle(this._state, i), i.set(O.buffer32Identity)), o <= 4294967295) i[14] = o;\n            else {\n                let u = o.toString(16).match(/(.*?)(.{0,8})$/);\n                if (u === null) return;\n                let c = parseInt(u[2], 16), h = parseInt(u[1], 16) || 0;\n                i[14] = c, i[15] = h;\n            }\n            return O._md5cycle(this._state, i), e ? this._state : O._hex(this._state);\n        }\n    };\n    a(O, \"Md5\"), T(O, \"stateIdentity\", new Int32Array([\n        1732584193,\n        -271733879,\n        -1732584194,\n        271733878\n    ])), T(O, \"buffer32Identity\", new Int32Array([\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0\n    ])), T(O, \"hexChars\", \"0123456789abcdef\"), T(O, \"hexOut\", []), T(O, \"onePassHasher\", new O);\n    je = O;\n});\nvar Qt = {};\nY(Qt, {\n    createHash: ()=>Ho,\n    createHmac: ()=>Go,\n    randomBytes: ()=>jo\n});\nfunction jo(r) {\n    return g.getRandomValues(d.alloc(r));\n}\nfunction Ho(r) {\n    if (r === \"sha256\") return {\n        update: function(e) {\n            return {\n                digest: function() {\n                    return d.from(We(e));\n                }\n            };\n        }\n    };\n    if (r === \"md5\") return {\n        update: function(e) {\n            return {\n                digest: function() {\n                    return typeof e == \"string\" ? je.hashStr(e) : je.hashByteArray(e);\n                }\n            };\n        }\n    };\n    throw new Error(`Hash type '${r}' not supported`);\n}\nfunction Go(r, e) {\n    if (r !== \"sha256\") throw new Error(`Only sha256 is supported (requested: '${r}')`);\n    return {\n        update: function(t) {\n            return {\n                digest: function() {\n                    typeof e == \"string\" && (e = new TextEncoder().encode(e)), typeof t == \"string\" && (t = new TextEncoder().encode(t));\n                    let n = e.length;\n                    if (n > 64) e = We(e);\n                    else if (n < 64) {\n                        let c = new Uint8Array(64);\n                        c.set(e), e = c;\n                    }\n                    let i = new Uint8Array(64), s = new Uint8Array(64);\n                    for(let c = 0; c < 64; c++)i[c] = 54 ^ e[c], s[c] = 92 ^ e[c];\n                    let o = new Uint8Array(t.length + 64);\n                    o.set(i, 0), o.set(t, 64);\n                    let u = new Uint8Array(64 + 32);\n                    return u.set(s, 0), u.set(We(o), 64), d.from(We(u));\n                }\n            };\n        }\n    };\n}\nvar Wt = W(()=>{\n    p();\n    oi();\n    ai();\n    a(jo, \"randomBytes\");\n    a(Ho, \"createHash\");\n    a(Go, \"createHmac\");\n});\nvar Ht = I((ui)=>{\n    \"use strict\";\n    p();\n    ui.parse = function(r, e) {\n        return new jt(r, e).parse();\n    };\n    var ct = class ct {\n        constructor(e, t){\n            this.source = e, this.transform = t || $o, this.position = 0, this.entries = [], this.recorded = [], this.dimension = 0;\n        }\n        isEof() {\n            return this.position >= this.source.length;\n        }\n        nextCharacter() {\n            var e = this.source[this.position++];\n            return e === \"\\\\\" ? {\n                value: this.source[this.position++],\n                escaped: !0\n            } : {\n                value: e,\n                escaped: !1\n            };\n        }\n        record(e) {\n            this.recorded.push(e);\n        }\n        newEntry(e) {\n            var t;\n            (this.recorded.length > 0 || e) && (t = this.recorded.join(\"\"), t === \"NULL\" && !e && (t = null), t !== null && (t = this.transform(t)), this.entries.push(t), this.recorded = []);\n        }\n        consumeDimensions() {\n            if (this.source[0] === \"[\") for(; !this.isEof();){\n                var e = this.nextCharacter();\n                if (e.value === \"=\") break;\n            }\n        }\n        parse(e) {\n            var t, n, i;\n            for(this.consumeDimensions(); !this.isEof();)if (t = this.nextCharacter(), t.value === \"{\" && !i) this.dimension++, this.dimension > 1 && (n = new ct(this.source.substr(this.position - 1), this.transform), this.entries.push(n.parse(!0)), this.position += n.position - 2);\n            else if (t.value === \"}\" && !i) {\n                if (this.dimension--, !this.dimension && (this.newEntry(), e)) return this.entries;\n            } else t.value === '\"' && !t.escaped ? (i && this.newEntry(!0), i = !i) : t.value === \",\" && !i ? this.newEntry() : this.record(t.value);\n            if (this.dimension !== 0) throw new Error(\"array dimension not balanced\");\n            return this.entries;\n        }\n    };\n    a(ct, \"ArrayParser\");\n    var jt = ct;\n    function $o(r) {\n        return r;\n    }\n    a($o, \"identity\");\n});\nvar Gt = I((mh, ci)=>{\n    p();\n    var Ko = Ht();\n    ci.exports = {\n        create: function(r, e) {\n            return {\n                parse: function() {\n                    return Ko.parse(r, e);\n                }\n            };\n        }\n    };\n});\nvar fi = I((wh, li)=>{\n    \"use strict\";\n    p();\n    var Vo = /(\\d{1,})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})(\\.\\d{1,})?.*?( BC)?$/, zo = /^(\\d{1,})-(\\d{2})-(\\d{2})( BC)?$/, Yo = /([Z+-])(\\d{2})?:?(\\d{2})?:?(\\d{2})?/, Zo = /^-?infinity$/;\n    li.exports = a(function(e) {\n        if (Zo.test(e)) return Number(e.replace(\"i\", \"I\"));\n        var t = Vo.exec(e);\n        if (!t) return Jo(e) || null;\n        var n = !!t[8], i = parseInt(t[1], 10);\n        n && (i = hi(i));\n        var s = parseInt(t[2], 10) - 1, o = t[3], u = parseInt(t[4], 10), c = parseInt(t[5], 10), h = parseInt(t[6], 10), f = t[7];\n        f = f ? 1e3 * parseFloat(f) : 0;\n        var m, x = Xo(e);\n        return x != null ? (m = new Date(Date.UTC(i, s, o, u, c, h, f)), $t(i) && m.setUTCFullYear(i), x !== 0 && m.setTime(m.getTime() - x)) : (m = new Date(i, s, o, u, c, h, f), $t(i) && m.setFullYear(i)), m;\n    }, \"parseDate\");\n    function Jo(r) {\n        var e = zo.exec(r);\n        if (e) {\n            var t = parseInt(e[1], 10), n = !!e[4];\n            n && (t = hi(t));\n            var i = parseInt(e[2], 10) - 1, s = e[3], o = new Date(t, i, s);\n            return $t(t) && o.setFullYear(t), o;\n        }\n    }\n    a(Jo, \"getDate\");\n    function Xo(r) {\n        if (r.endsWith(\"+00\")) return 0;\n        var e = Yo.exec(r.split(\" \")[1]);\n        if (e) {\n            var t = e[1];\n            if (t === \"Z\") return 0;\n            var n = t === \"-\" ? -1 : 1, i = parseInt(e[2], 10) * 3600 + parseInt(e[3] || 0, 10) * 60 + parseInt(e[4] || 0, 10);\n            return i * n * 1e3;\n        }\n    }\n    a(Xo, \"timeZoneOffset\");\n    function hi(r) {\n        return -(r - 1);\n    }\n    a(hi, \"bcYearToNegativeYear\");\n    function $t(r) {\n        return r >= 0 && r < 100;\n    }\n    a($t, \"is0To99\");\n});\nvar di = I((xh, pi)=>{\n    p();\n    pi.exports = ta;\n    var ea = Object.prototype.hasOwnProperty;\n    function ta(r) {\n        for(var e = 1; e < arguments.length; e++){\n            var t = arguments[e];\n            for(var n in t)ea.call(t, n) && (r[n] = t[n]);\n        }\n        return r;\n    }\n    a(ta, \"extend\");\n});\nvar gi = I((_h, mi)=>{\n    \"use strict\";\n    p();\n    var ra = di();\n    mi.exports = Be;\n    function Be(r) {\n        if (!(this instanceof Be)) return new Be(r);\n        ra(this, da(r));\n    }\n    a(Be, \"PostgresInterval\");\n    var na = [\n        \"seconds\",\n        \"minutes\",\n        \"hours\",\n        \"days\",\n        \"months\",\n        \"years\"\n    ];\n    Be.prototype.toPostgres = function() {\n        var r = na.filter(this.hasOwnProperty, this);\n        return this.milliseconds && r.indexOf(\"seconds\") < 0 && r.push(\"seconds\"), r.length === 0 ? \"0\" : r.map(function(e) {\n            var t = this[e] || 0;\n            return e === \"seconds\" && this.milliseconds && (t = (t + this.milliseconds / 1e3).toFixed(6).replace(/\\.?0+$/, \"\")), t + \" \" + e;\n        }, this).join(\" \");\n    };\n    var ia = {\n        years: \"Y\",\n        months: \"M\",\n        days: \"D\",\n        hours: \"H\",\n        minutes: \"M\",\n        seconds: \"S\"\n    }, sa = [\n        \"years\",\n        \"months\",\n        \"days\"\n    ], oa = [\n        \"hours\",\n        \"minutes\",\n        \"seconds\"\n    ];\n    Be.prototype.toISOString = Be.prototype.toISO = function() {\n        var r = sa.map(t, this).join(\"\"), e = oa.map(t, this).join(\"\");\n        return \"P\" + r + \"T\" + e;\n        function t(n) {\n            var i = this[n] || 0;\n            return n === \"seconds\" && this.milliseconds && (i = (i + this.milliseconds / 1e3).toFixed(6).replace(/0+$/, \"\")), i + ia[n];\n        }\n    };\n    var Kt = \"([+-]?\\\\d+)\", aa = Kt + \"\\\\s+years?\", ua = Kt + \"\\\\s+mons?\", ca = Kt + \"\\\\s+days?\", ha = \"([+-])?([\\\\d]*):(\\\\d\\\\d):(\\\\d\\\\d)\\\\.?(\\\\d{1,6})?\", la = new RegExp([\n        aa,\n        ua,\n        ca,\n        ha\n    ].map(function(r) {\n        return \"(\" + r + \")?\";\n    }).join(\"\\\\s*\")), yi = {\n        years: 2,\n        months: 4,\n        days: 6,\n        hours: 9,\n        minutes: 10,\n        seconds: 11,\n        milliseconds: 12\n    }, fa = [\n        \"hours\",\n        \"minutes\",\n        \"seconds\",\n        \"milliseconds\"\n    ];\n    function pa(r) {\n        var e = r + \"000000\".slice(r.length);\n        return parseInt(e, 10) / 1e3;\n    }\n    a(pa, \"parseMilliseconds\");\n    function da(r) {\n        if (!r) return {};\n        var e = la.exec(r), t = e[8] === \"-\";\n        return Object.keys(yi).reduce(function(n, i) {\n            var s = yi[i], o = e[s];\n            return !o || (o = i === \"milliseconds\" ? pa(o) : parseInt(o, 10), !o) || (t && ~fa.indexOf(i) && (o *= -1), n[i] = o), n;\n        }, {});\n    }\n    a(da, \"parse\");\n});\nvar bi = I((Ih, wi)=>{\n    \"use strict\";\n    p();\n    wi.exports = a(function(e) {\n        if (/^\\\\x/.test(e)) return new d(e.substr(2), \"hex\");\n        for(var t = \"\", n = 0; n < e.length;)if (e[n] !== \"\\\\\") t += e[n], ++n;\n        else if (/[0-7]{3}/.test(e.substr(n + 1, 3))) t += String.fromCharCode(parseInt(e.substr(n + 1, 3), 8)), n += 4;\n        else {\n            for(var i = 1; n + i < e.length && e[n + i] === \"\\\\\";)i++;\n            for(var s = 0; s < Math.floor(i / 2); ++s)t += \"\\\\\";\n            n += Math.floor(i / 2) * 2;\n        }\n        return new d(t, \"binary\");\n    }, \"parseBytea\");\n});\nvar Ci = I((Bh, Ai)=>{\n    p();\n    var He = Ht(), Ge = Gt(), ht = fi(), xi = gi(), Ei = bi();\n    function lt(r) {\n        return a(function(t) {\n            return t === null ? t : r(t);\n        }, \"nullAllowed\");\n    }\n    a(lt, \"allowNull\");\n    function vi(r) {\n        return r === null ? r : r === \"TRUE\" || r === \"t\" || r === \"true\" || r === \"y\" || r === \"yes\" || r === \"on\" || r === \"1\";\n    }\n    a(vi, \"parseBool\");\n    function ya(r) {\n        return r ? He.parse(r, vi) : null;\n    }\n    a(ya, \"parseBoolArray\");\n    function ma(r) {\n        return parseInt(r, 10);\n    }\n    a(ma, \"parseBaseTenInt\");\n    function Vt(r) {\n        return r ? He.parse(r, lt(ma)) : null;\n    }\n    a(Vt, \"parseIntegerArray\");\n    function ga(r) {\n        return r ? He.parse(r, lt(function(e) {\n            return _i(e).trim();\n        })) : null;\n    }\n    a(ga, \"parseBigIntegerArray\");\n    var wa = a(function(r) {\n        if (!r) return null;\n        var e = Ge.create(r, function(t) {\n            return t !== null && (t = Jt(t)), t;\n        });\n        return e.parse();\n    }, \"parsePointArray\"), zt = a(function(r) {\n        if (!r) return null;\n        var e = Ge.create(r, function(t) {\n            return t !== null && (t = parseFloat(t)), t;\n        });\n        return e.parse();\n    }, \"parseFloatArray\"), X = a(function(r) {\n        if (!r) return null;\n        var e = Ge.create(r);\n        return e.parse();\n    }, \"parseStringArray\"), Yt = a(function(r) {\n        if (!r) return null;\n        var e = Ge.create(r, function(t) {\n            return t !== null && (t = ht(t)), t;\n        });\n        return e.parse();\n    }, \"parseDateArray\"), ba = a(function(r) {\n        if (!r) return null;\n        var e = Ge.create(r, function(t) {\n            return t !== null && (t = xi(t)), t;\n        });\n        return e.parse();\n    }, \"parseIntervalArray\"), Sa = a(function(r) {\n        return r ? He.parse(r, lt(Ei)) : null;\n    }, \"parseByteAArray\"), Zt = a(function(r) {\n        return parseInt(r, 10);\n    }, \"parseInteger\"), _i = a(function(r) {\n        var e = String(r);\n        return /^\\d+$/.test(e) ? e : r;\n    }, \"parseBigInteger\"), Si = a(function(r) {\n        return r ? He.parse(r, lt(JSON.parse)) : null;\n    }, \"parseJsonArray\"), Jt = a(function(r) {\n        return r[0] !== \"(\" ? null : (r = r.substring(1, r.length - 1).split(\",\"), {\n            x: parseFloat(r[0]),\n            y: parseFloat(r[1])\n        });\n    }, \"parsePoint\"), xa = a(function(r) {\n        if (r[0] !== \"<\" && r[1] !== \"(\") return null;\n        for(var e = \"(\", t = \"\", n = !1, i = 2; i < r.length - 1; i++){\n            if (n || (e += r[i]), r[i] === \")\") {\n                n = !0;\n                continue;\n            } else if (!n) continue;\n            r[i] !== \",\" && (t += r[i]);\n        }\n        var s = Jt(e);\n        return s.radius = parseFloat(t), s;\n    }, \"parseCircle\"), Ea = a(function(r) {\n        r(20, _i), r(21, Zt), r(23, Zt), r(26, Zt), r(700, parseFloat), r(701, parseFloat), r(16, vi), r(1082, ht), r(1114, ht), r(1184, ht), r(600, Jt), r(651, X), r(718, xa), r(1e3, ya), r(1001, Sa), r(1005, Vt), r(1007, Vt), r(1028, Vt), r(1016, ga), r(1017, wa), r(1021, zt), r(1022, zt), r(1231, zt), r(1014, X), r(1015, X), r(1008, X), r(1009, X), r(1040, X), r(1041, X), r(1115, Yt), r(1182, Yt), r(1185, Yt), r(1186, xi), r(1187, ba), r(17, Ei), r(114, JSON.parse.bind(JSON)), r(3802, JSON.parse.bind(JSON)), r(199, Si), r(3807, Si), r(3907, X), r(2951, X), r(791, X), r(1183, X), r(1270, X);\n    }, \"init\");\n    Ai.exports = {\n        init: Ea\n    };\n});\nvar Ti = I((Fh, Ii)=>{\n    \"use strict\";\n    p();\n    var $ = 1e6;\n    function va(r) {\n        var e = r.readInt32BE(0), t = r.readUInt32BE(4), n = \"\";\n        e < 0 && (e = ~e + (t === 0), t = ~t + 1 >>> 0, n = \"-\");\n        var i = \"\", s, o, u, c, h, f;\n        {\n            if (s = e % $, e = e / $ >>> 0, o = 4294967296 * s + t, t = o / $ >>> 0, u = \"\" + (o - $ * t), t === 0 && e === 0) return n + u + i;\n            for(c = \"\", h = 6 - u.length, f = 0; f < h; f++)c += \"0\";\n            i = c + u + i;\n        }\n        {\n            if (s = e % $, e = e / $ >>> 0, o = 4294967296 * s + t, t = o / $ >>> 0, u = \"\" + (o - $ * t), t === 0 && e === 0) return n + u + i;\n            for(c = \"\", h = 6 - u.length, f = 0; f < h; f++)c += \"0\";\n            i = c + u + i;\n        }\n        {\n            if (s = e % $, e = e / $ >>> 0, o = 4294967296 * s + t, t = o / $ >>> 0, u = \"\" + (o - $ * t), t === 0 && e === 0) return n + u + i;\n            for(c = \"\", h = 6 - u.length, f = 0; f < h; f++)c += \"0\";\n            i = c + u + i;\n        }\n        return s = e % $, o = 4294967296 * s + t, u = \"\" + o % $, n + u + i;\n    }\n    a(va, \"readInt8\");\n    Ii.exports = va;\n});\nvar Fi = I((kh, Ri)=>{\n    p();\n    var _a = Ti(), F = a(function(r, e, t, n, i) {\n        t = t || 0, n = n || !1, i = i || function(_, P, k) {\n            return _ * Math.pow(2, k) + P;\n        };\n        var s = t >> 3, o = a(function(_) {\n            return n ? ~_ & 255 : _;\n        }, \"inv\"), u = 255, c = 8 - t % 8;\n        e < c && (u = 255 << 8 - e & 255, c = e), t && (u = u >> t % 8);\n        var h = 0;\n        t % 8 + e >= 8 && (h = i(0, o(r[s]) & u, c));\n        for(var f = e + t >> 3, m = s + 1; m < f; m++)h = i(h, o(r[m]), 8);\n        var x = (e + t) % 8;\n        return x > 0 && (h = i(h, o(r[f]) >> 8 - x, x)), h;\n    }, \"parseBits\"), Li = a(function(r, e, t) {\n        var n = Math.pow(2, t - 1) - 1, i = F(r, 1), s = F(r, t, 1);\n        if (s === 0) return 0;\n        var o = 1, u = a(function(h, f, m) {\n            h === 0 && (h = 1);\n            for(var x = 1; x <= m; x++)o /= 2, (f & 1 << m - x) > 0 && (h += o);\n            return h;\n        }, \"parsePrecisionBits\"), c = F(r, e, t + 1, !1, u);\n        return s == Math.pow(2, t + 1) - 1 ? c === 0 ? i === 0 ? 1 / 0 : -1 / 0 : NaN : (i === 0 ? 1 : -1) * Math.pow(2, s - n) * c;\n    }, \"parseFloatFromBits\"), Aa = a(function(r) {\n        return F(r, 1) == 1 ? -1 * (F(r, 15, 1, !0) + 1) : F(r, 15, 1);\n    }, \"parseInt16\"), Pi = a(function(r) {\n        return F(r, 1) == 1 ? -1 * (F(r, 31, 1, !0) + 1) : F(r, 31, 1);\n    }, \"parseInt32\"), Ca = a(function(r) {\n        return Li(r, 23, 8);\n    }, \"parseFloat32\"), Ia = a(function(r) {\n        return Li(r, 52, 11);\n    }, \"parseFloat64\"), Ta = a(function(r) {\n        var e = F(r, 16, 32);\n        if (e == 49152) return NaN;\n        for(var t = Math.pow(1e4, F(r, 16, 16)), n = 0, i = [], s = F(r, 16), o = 0; o < s; o++)n += F(r, 16, 64 + 16 * o) * t, t /= 1e4;\n        var u = Math.pow(10, F(r, 16, 48));\n        return (e === 0 ? 1 : -1) * Math.round(n * u) / u;\n    }, \"parseNumeric\"), Bi = a(function(r, e) {\n        var t = F(e, 1), n = F(e, 63, 1), i = new Date((t === 0 ? 1 : -1) * n / 1e3 + 9466848e5);\n        return r || i.setTime(i.getTime() + i.getTimezoneOffset() * 6e4), i.usec = n % 1e3, i.getMicroSeconds = function() {\n            return this.usec;\n        }, i.setMicroSeconds = function(s) {\n            this.usec = s;\n        }, i.getUTCMicroSeconds = function() {\n            return this.usec;\n        }, i;\n    }, \"parseDate\"), $e = a(function(r) {\n        for(var e = F(r, 32), t = F(r, 32, 32), n = F(r, 32, 64), i = 96, s = [], o = 0; o < e; o++)s[o] = F(r, 32, i), i += 32, i += 32;\n        var u = a(function(h) {\n            var f = F(r, 32, i);\n            if (i += 32, f == 4294967295) return null;\n            var m;\n            if (h == 23 || h == 20) return m = F(r, f * 8, i), i += f * 8, m;\n            if (h == 25) return m = r.toString(this.encoding, i >> 3, (i += f << 3) >> 3), m;\n            console.log(\"ERROR: ElementType not implemented: \" + h);\n        }, \"parseElement\"), c = a(function(h, f) {\n            var m = [], x;\n            if (h.length > 1) {\n                var _ = h.shift();\n                for(x = 0; x < _; x++)m[x] = c(h, f);\n                h.unshift(_);\n            } else for(x = 0; x < h[0]; x++)m[x] = u(f);\n            return m;\n        }, \"parse\");\n        return c(s, n);\n    }, \"parseArray\"), Pa = a(function(r) {\n        return r.toString(\"utf8\");\n    }, \"parseText\"), Ba = a(function(r) {\n        return r === null ? null : F(r, 8) > 0;\n    }, \"parseBool\"), La = a(function(r) {\n        r(20, _a), r(21, Aa), r(23, Pi), r(26, Pi), r(1700, Ta), r(700, Ca), r(701, Ia), r(16, Ba), r(1114, Bi.bind(null, !1)), r(1184, Bi.bind(null, !0)), r(1e3, $e), r(1007, $e), r(1016, $e), r(1008, $e), r(1009, $e), r(25, Pa);\n    }, \"init\");\n    Ri.exports = {\n        init: La\n    };\n});\nvar Di = I((qh, Mi)=>{\n    p();\n    Mi.exports = {\n        BOOL: 16,\n        BYTEA: 17,\n        CHAR: 18,\n        INT8: 20,\n        INT2: 21,\n        INT4: 23,\n        REGPROC: 24,\n        TEXT: 25,\n        OID: 26,\n        TID: 27,\n        XID: 28,\n        CID: 29,\n        JSON: 114,\n        XML: 142,\n        PG_NODE_TREE: 194,\n        SMGR: 210,\n        PATH: 602,\n        POLYGON: 604,\n        CIDR: 650,\n        FLOAT4: 700,\n        FLOAT8: 701,\n        ABSTIME: 702,\n        RELTIME: 703,\n        TINTERVAL: 704,\n        CIRCLE: 718,\n        MACADDR8: 774,\n        MONEY: 790,\n        MACADDR: 829,\n        INET: 869,\n        ACLITEM: 1033,\n        BPCHAR: 1042,\n        VARCHAR: 1043,\n        DATE: 1082,\n        TIME: 1083,\n        TIMESTAMP: 1114,\n        TIMESTAMPTZ: 1184,\n        INTERVAL: 1186,\n        TIMETZ: 1266,\n        BIT: 1560,\n        VARBIT: 1562,\n        NUMERIC: 1700,\n        REFCURSOR: 1790,\n        REGPROCEDURE: 2202,\n        REGOPER: 2203,\n        REGOPERATOR: 2204,\n        REGCLASS: 2205,\n        REGTYPE: 2206,\n        UUID: 2950,\n        TXID_SNAPSHOT: 2970,\n        PG_LSN: 3220,\n        PG_NDISTINCT: 3361,\n        PG_DEPENDENCIES: 3402,\n        TSVECTOR: 3614,\n        TSQUERY: 3615,\n        GTSVECTOR: 3642,\n        REGCONFIG: 3734,\n        REGDICTIONARY: 3769,\n        JSONB: 3802,\n        REGNAMESPACE: 4089,\n        REGROLE: 4096\n    };\n});\nvar ze = I((Ve)=>{\n    p();\n    var Ra = Ci(), Fa = Fi(), Ma = Gt(), Da = Di();\n    Ve.getTypeParser = ka;\n    Ve.setTypeParser = Ua;\n    Ve.arrayParser = Ma;\n    Ve.builtins = Da;\n    var Ke = {\n        text: {},\n        binary: {}\n    };\n    function ki(r) {\n        return String(r);\n    }\n    a(ki, \"noParse\");\n    function ka(r, e) {\n        return e = e || \"text\", Ke[e] && Ke[e][r] || ki;\n    }\n    a(ka, \"getTypeParser\");\n    function Ua(r, e, t) {\n        typeof e == \"function\" && (t = e, e = \"text\"), Ke[e][r] = t;\n    }\n    a(Ua, \"setTypeParser\");\n    Ra.init(function(r, e) {\n        Ke.text[r] = e;\n    });\n    Fa.init(function(r, e) {\n        Ke.binary[r] = e;\n    });\n});\nvar Ye = I((Hh, Xt)=>{\n    \"use strict\";\n    p();\n    Xt.exports = {\n        host: \"localhost\",\n        user: y.platform === \"win32\" ? y.env.USERNAME : y.env.USER,\n        database: void 0,\n        password: null,\n        connectionString: void 0,\n        port: 5432,\n        rows: 0,\n        binary: !1,\n        max: 10,\n        idleTimeoutMillis: 3e4,\n        client_encoding: \"\",\n        ssl: !1,\n        application_name: void 0,\n        fallback_application_name: void 0,\n        options: void 0,\n        parseInputDatesAsUTC: !1,\n        statement_timeout: !1,\n        lock_timeout: !1,\n        idle_in_transaction_session_timeout: !1,\n        query_timeout: !1,\n        connect_timeout: 0,\n        keepalives: 1,\n        keepalives_idle: 0\n    };\n    var Le = ze(), Oa = Le.getTypeParser(20, \"text\"), qa = Le.getTypeParser(1016, \"text\");\n    Xt.exports.__defineSetter__(\"parseInt8\", function(r) {\n        Le.setTypeParser(20, \"text\", r ? Le.getTypeParser(23, \"text\") : Oa), Le.setTypeParser(1016, \"text\", r ? Le.getTypeParser(1007, \"text\") : qa);\n    });\n});\nvar Ze = I(($h, Oi)=>{\n    \"use strict\";\n    p();\n    var Na = (Wt(), U(Qt)), Qa = Ye();\n    function Wa(r) {\n        var e = r.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"');\n        return '\"' + e + '\"';\n    }\n    a(Wa, \"escapeElement\");\n    function Ui(r) {\n        for(var e = \"{\", t = 0; t < r.length; t++)t > 0 && (e = e + \",\"), r[t] === null || typeof r[t] > \"u\" ? e = e + \"NULL\" : Array.isArray(r[t]) ? e = e + Ui(r[t]) : r[t] instanceof d ? e += \"\\\\\\\\x\" + r[t].toString(\"hex\") : e += Wa(ft(r[t]));\n        return e = e + \"}\", e;\n    }\n    a(Ui, \"arrayString\");\n    var ft = a(function(r, e) {\n        if (r == null) return null;\n        if (r instanceof d) return r;\n        if (ArrayBuffer.isView(r)) {\n            var t = d.from(r.buffer, r.byteOffset, r.byteLength);\n            return t.length === r.byteLength ? t : t.slice(r.byteOffset, r.byteOffset + r.byteLength);\n        }\n        return r instanceof Date ? Qa.parseInputDatesAsUTC ? Ga(r) : Ha(r) : Array.isArray(r) ? Ui(r) : typeof r == \"object\" ? ja(r, e) : r.toString();\n    }, \"prepareValue\");\n    function ja(r, e) {\n        if (r && typeof r.toPostgres == \"function\") {\n            if (e = e || [], e.indexOf(r) !== -1) throw new Error('circular reference detected while preparing \"' + r + '\" for query');\n            return e.push(r), ft(r.toPostgres(ft), e);\n        }\n        return JSON.stringify(r);\n    }\n    a(ja, \"prepareObject\");\n    function Q(r, e) {\n        for(r = \"\" + r; r.length < e;)r = \"0\" + r;\n        return r;\n    }\n    a(Q, \"pad\");\n    function Ha(r) {\n        var e = -r.getTimezoneOffset(), t = r.getFullYear(), n = t < 1;\n        n && (t = Math.abs(t) + 1);\n        var i = Q(t, 4) + \"-\" + Q(r.getMonth() + 1, 2) + \"-\" + Q(r.getDate(), 2) + \"T\" + Q(r.getHours(), 2) + \":\" + Q(r.getMinutes(), 2) + \":\" + Q(r.getSeconds(), 2) + \".\" + Q(r.getMilliseconds(), 3);\n        return e < 0 ? (i += \"-\", e *= -1) : i += \"+\", i += Q(Math.floor(e / 60), 2) + \":\" + Q(e % 60, 2), n && (i += \" BC\"), i;\n    }\n    a(Ha, \"dateToString\");\n    function Ga(r) {\n        var e = r.getUTCFullYear(), t = e < 1;\n        t && (e = Math.abs(e) + 1);\n        var n = Q(e, 4) + \"-\" + Q(r.getUTCMonth() + 1, 2) + \"-\" + Q(r.getUTCDate(), 2) + \"T\" + Q(r.getUTCHours(), 2) + \":\" + Q(r.getUTCMinutes(), 2) + \":\" + Q(r.getUTCSeconds(), 2) + \".\" + Q(r.getUTCMilliseconds(), 3);\n        return n += \"+00:00\", t && (n += \" BC\"), n;\n    }\n    a(Ga, \"dateToStringUTC\");\n    function $a(r, e, t) {\n        return r = typeof r == \"string\" ? {\n            text: r\n        } : r, e && (typeof e == \"function\" ? r.callback = e : r.values = e), t && (r.callback = t), r;\n    }\n    a($a, \"normalizeQueryConfig\");\n    var er = a(function(r) {\n        return Na.createHash(\"md5\").update(r, \"utf-8\").digest(\"hex\");\n    }, \"md5\"), Ka = a(function(r, e, t) {\n        var n = er(e + r), i = er(d.concat([\n            d.from(n),\n            t\n        ]));\n        return \"md5\" + i;\n    }, \"postgresMd5PasswordHash\");\n    Oi.exports = {\n        prepareValue: a(function(e) {\n            return ft(e);\n        }, \"prepareValueWrapper\"),\n        normalizeQueryConfig: $a,\n        postgresMd5PasswordHash: Ka,\n        md5: er\n    };\n});\nvar Xe = {};\nY(Xe, {\n    default: ()=>Va\n});\nvar Va, et = W(()=>{\n    p();\n    Va = {};\n});\nvar Hi = I((rl, ji)=>{\n    \"use strict\";\n    p();\n    var rr = (Wt(), U(Qt));\n    function za(r) {\n        if (r.indexOf(\"SCRAM-SHA-256\") === -1) throw new Error(\"SASL: Only mechanism SCRAM-SHA-256 is currently supported\");\n        let e = rr.randomBytes(18).toString(\"base64\");\n        return {\n            mechanism: \"SCRAM-SHA-256\",\n            clientNonce: e,\n            response: \"n,,n=*,r=\" + e,\n            message: \"SASLInitialResponse\"\n        };\n    }\n    a(za, \"startSession\");\n    function Ya(r, e, t) {\n        if (r.message !== \"SASLInitialResponse\") throw new Error(\"SASL: Last message was not SASLInitialResponse\");\n        if (typeof e != \"string\") throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: client password must be a string\");\n        if (typeof t != \"string\") throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: serverData must be a string\");\n        let n = Xa(t);\n        if (n.nonce.startsWith(r.clientNonce)) {\n            if (n.nonce.length === r.clientNonce.length) throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: server nonce is too short\");\n        } else throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: server nonce does not start with client nonce\");\n        var i = d.from(n.salt, \"base64\"), s = ru(e, i, n.iteration), o = Re(s, \"Client Key\"), u = tu(o), c = \"n=*,r=\" + r.clientNonce, h = \"r=\" + n.nonce + \",s=\" + n.salt + \",i=\" + n.iteration, f = \"c=biws,r=\" + n.nonce, m = c + \",\" + h + \",\" + f, x = Re(u, m), _ = Wi(o, x), P = _.toString(\"base64\"), k = Re(s, \"Server Key\"), z = Re(k, m);\n        r.message = \"SASLResponse\", r.serverSignature = z.toString(\"base64\"), r.response = f + \",p=\" + P;\n    }\n    a(Ya, \"continueSession\");\n    function Za(r, e) {\n        if (r.message !== \"SASLResponse\") throw new Error(\"SASL: Last message was not SASLResponse\");\n        if (typeof e != \"string\") throw new Error(\"SASL: SCRAM-SERVER-FINAL-MESSAGE: serverData must be a string\");\n        let { serverSignature: t } = eu(e);\n        if (t !== r.serverSignature) throw new Error(\"SASL: SCRAM-SERVER-FINAL-MESSAGE: server signature does not match\");\n    }\n    a(Za, \"finalizeSession\");\n    function Ja(r) {\n        if (typeof r != \"string\") throw new TypeError(\"SASL: text must be a string\");\n        return r.split(\"\").map((e, t)=>r.charCodeAt(t)).every((e)=>e >= 33 && e <= 43 || e >= 45 && e <= 126);\n    }\n    a(Ja, \"isPrintableChars\");\n    function Ni(r) {\n        return /^(?:[a-zA-Z0-9+/]{4})*(?:[a-zA-Z0-9+/]{2}==|[a-zA-Z0-9+/]{3}=)?$/.test(r);\n    }\n    a(Ni, \"isBase64\");\n    function Qi(r) {\n        if (typeof r != \"string\") throw new TypeError(\"SASL: attribute pairs text must be a string\");\n        return new Map(r.split(\",\").map((e)=>{\n            if (!/^.=/.test(e)) throw new Error(\"SASL: Invalid attribute pair entry\");\n            let t = e[0], n = e.substring(2);\n            return [\n                t,\n                n\n            ];\n        }));\n    }\n    a(Qi, \"parseAttributePairs\");\n    function Xa(r) {\n        let e = Qi(r), t = e.get(\"r\");\n        if (t) {\n            if (!Ja(t)) throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: nonce must only contain printable characters\");\n        } else throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: nonce missing\");\n        let n = e.get(\"s\");\n        if (n) {\n            if (!Ni(n)) throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: salt must be base64\");\n        } else throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: salt missing\");\n        let i = e.get(\"i\");\n        if (i) {\n            if (!/^[1-9][0-9]*$/.test(i)) throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: invalid iteration count\");\n        } else throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: iteration missing\");\n        let s = parseInt(i, 10);\n        return {\n            nonce: t,\n            salt: n,\n            iteration: s\n        };\n    }\n    a(Xa, \"parseServerFirstMessage\");\n    function eu(r) {\n        let t = Qi(r).get(\"v\");\n        if (t) {\n            if (!Ni(t)) throw new Error(\"SASL: SCRAM-SERVER-FINAL-MESSAGE: server signature must be base64\");\n        } else throw new Error(\"SASL: SCRAM-SERVER-FINAL-MESSAGE: server signature is missing\");\n        return {\n            serverSignature: t\n        };\n    }\n    a(eu, \"parseServerFinalMessage\");\n    function Wi(r, e) {\n        if (!d.isBuffer(r)) throw new TypeError(\"first argument must be a Buffer\");\n        if (!d.isBuffer(e)) throw new TypeError(\"second argument must be a Buffer\");\n        if (r.length !== e.length) throw new Error(\"Buffer lengths must match\");\n        if (r.length === 0) throw new Error(\"Buffers cannot be empty\");\n        return d.from(r.map((t, n)=>r[n] ^ e[n]));\n    }\n    a(Wi, \"xorBuffers\");\n    function tu(r) {\n        return rr.createHash(\"sha256\").update(r).digest();\n    }\n    a(tu, \"sha256\");\n    function Re(r, e) {\n        return rr.createHmac(\"sha256\", r).update(e).digest();\n    }\n    a(Re, \"hmacSha256\");\n    function ru(r, e, t) {\n        for(var n = Re(r, d.concat([\n            e,\n            d.from([\n                0,\n                0,\n                0,\n                1\n            ])\n        ])), i = n, s = 0; s < t - 1; s++)n = Re(r, n), i = Wi(i, n);\n        return i;\n    }\n    a(ru, \"Hi\");\n    ji.exports = {\n        startSession: za,\n        continueSession: Ya,\n        finalizeSession: Za\n    };\n});\nvar nr = {};\nY(nr, {\n    join: ()=>nu\n});\nfunction nu(...r) {\n    return r.join(\"/\");\n}\nvar ir = W(()=>{\n    p();\n    a(nu, \"join\");\n});\nvar sr = {};\nY(sr, {\n    stat: ()=>iu\n});\nfunction iu(r, e) {\n    e(new Error(\"No filesystem\"));\n}\nvar or = W(()=>{\n    p();\n    a(iu, \"stat\");\n});\nvar ar = {};\nY(ar, {\n    default: ()=>su\n});\nvar su, ur = W(()=>{\n    p();\n    su = {};\n});\nvar Gi = {};\nY(Gi, {\n    StringDecoder: ()=>cr\n});\nvar hr, cr, $i = W(()=>{\n    p();\n    hr = class hr {\n        constructor(e){\n            T(this, \"td\");\n            this.td = new TextDecoder(e);\n        }\n        write(e) {\n            return this.td.decode(e, {\n                stream: !0\n            });\n        }\n        end(e) {\n            return this.td.decode(e);\n        }\n    };\n    a(hr, \"StringDecoder\");\n    cr = hr;\n});\nvar Yi = I((fl, zi)=>{\n    \"use strict\";\n    p();\n    var { Transform: ou } = (ur(), U(ar)), { StringDecoder: au } = ($i(), U(Gi)), ge = Symbol(\"last\"), dt = Symbol(\"decoder\");\n    function uu(r, e, t) {\n        let n;\n        if (this.overflow) {\n            if (n = this[dt].write(r).split(this.matcher), n.length === 1) return t();\n            n.shift(), this.overflow = !1;\n        } else this[ge] += this[dt].write(r), n = this[ge].split(this.matcher);\n        this[ge] = n.pop();\n        for(let i = 0; i < n.length; i++)try {\n            Vi(this, this.mapper(n[i]));\n        } catch (s) {\n            return t(s);\n        }\n        if (this.overflow = this[ge].length > this.maxLength, this.overflow && !this.skipOverflow) {\n            t(new Error(\"maximum buffer reached\"));\n            return;\n        }\n        t();\n    }\n    a(uu, \"transform\");\n    function cu(r) {\n        if (this[ge] += this[dt].end(), this[ge]) try {\n            Vi(this, this.mapper(this[ge]));\n        } catch (e) {\n            return r(e);\n        }\n        r();\n    }\n    a(cu, \"flush\");\n    function Vi(r, e) {\n        e !== void 0 && r.push(e);\n    }\n    a(Vi, \"push\");\n    function Ki(r) {\n        return r;\n    }\n    a(Ki, \"noop\");\n    function hu(r, e, t) {\n        switch(r = r || /\\r?\\n/, e = e || Ki, t = t || {}, arguments.length){\n            case 1:\n                typeof r == \"function\" ? (e = r, r = /\\r?\\n/) : typeof r == \"object\" && !(r instanceof RegExp) && !r[Symbol.split] && (t = r, r = /\\r?\\n/);\n                break;\n            case 2:\n                typeof r == \"function\" ? (t = e, e = r, r = /\\r?\\n/) : typeof e == \"object\" && (t = e, e = Ki);\n        }\n        t = Object.assign({}, t), t.autoDestroy = !0, t.transform = uu, t.flush = cu, t.readableObjectMode = !0;\n        let n = new ou(t);\n        return n[ge] = \"\", n[dt] = new au(\"utf8\"), n.matcher = r, n.mapper = e, n.maxLength = t.maxLength, n.skipOverflow = t.skipOverflow || !1, n.overflow = !1, n._destroy = function(i, s) {\n            this._writableState.errorEmitted = !1, s(i);\n        }, n;\n    }\n    a(hu, \"split\");\n    zi.exports = hu;\n});\nvar Xi = I((yl, fe)=>{\n    \"use strict\";\n    p();\n    var Zi = (ir(), U(nr)), lu = (ur(), U(ar)).Stream, fu = Yi(), Ji = (et(), U(Xe)), pu = 5432, yt = y.platform === \"win32\", tt = y.stderr, du = 56, yu = 7, mu = 61440, gu = 32768;\n    function wu(r) {\n        return (r & mu) == gu;\n    }\n    a(wu, \"isRegFile\");\n    var Fe = [\n        \"host\",\n        \"port\",\n        \"database\",\n        \"user\",\n        \"password\"\n    ], lr = Fe.length, bu = Fe[lr - 1];\n    function fr() {\n        var r = tt instanceof lu && tt.writable === !0;\n        if (r) {\n            var e = Array.prototype.slice.call(arguments).concat(`\n`);\n            tt.write(Ji.format.apply(Ji, e));\n        }\n    }\n    a(fr, \"warn\");\n    Object.defineProperty(fe.exports, \"isWin\", {\n        get: function() {\n            return yt;\n        },\n        set: function(r) {\n            yt = r;\n        }\n    });\n    fe.exports.warnTo = function(r) {\n        var e = tt;\n        return tt = r, e;\n    };\n    fe.exports.getFileName = function(r) {\n        var e = r || y.env, t = e.PGPASSFILE || (yt ? Zi.join(e.APPDATA || \"./\", \"postgresql\", \"pgpass.conf\") : Zi.join(e.HOME || \"./\", \".pgpass\"));\n        return t;\n    };\n    fe.exports.usePgPass = function(r, e) {\n        return Object.prototype.hasOwnProperty.call(y.env, \"PGPASSWORD\") ? !1 : yt ? !0 : (e = e || \"<unkn>\", wu(r.mode) ? r.mode & (du | yu) ? (fr('WARNING: password file \"%s\" has group or world access; permissions should be u=rw (0600) or less', e), !1) : !0 : (fr('WARNING: password file \"%s\" is not a plain file', e), !1));\n    };\n    var Su = fe.exports.match = function(r, e) {\n        return Fe.slice(0, -1).reduce(function(t, n, i) {\n            return i == 1 && Number(r[n] || pu) === Number(e[n]) ? t && !0 : t && (e[n] === \"*\" || e[n] === r[n]);\n        }, !0);\n    };\n    fe.exports.getPassword = function(r, e, t) {\n        var n, i = e.pipe(fu());\n        function s(c) {\n            var h = xu(c);\n            h && Eu(h) && Su(r, h) && (n = h[bu], i.end());\n        }\n        a(s, \"onLine\");\n        var o = a(function() {\n            e.destroy(), t(n);\n        }, \"onEnd\"), u = a(function(c) {\n            e.destroy(), fr(\"WARNING: error on reading file: %s\", c), t(void 0);\n        }, \"onErr\");\n        e.on(\"error\", u), i.on(\"data\", s).on(\"end\", o).on(\"error\", u);\n    };\n    var xu = fe.exports.parseLine = function(r) {\n        if (r.length < 11 || r.match(/^\\s+#/)) return null;\n        for(var e = \"\", t = \"\", n = 0, i = 0, s = 0, o = {}, u = !1, c = a(function(f, m, x) {\n            var _ = r.substring(m, x);\n            Object.hasOwnProperty.call(y.env, \"PGPASS_NO_DEESCAPE\") || (_ = _.replace(/\\\\([:\\\\])/g, \"$1\")), o[Fe[f]] = _;\n        }, \"addToObj\"), h = 0; h < r.length - 1; h += 1){\n            if (e = r.charAt(h + 1), t = r.charAt(h), u = n == lr - 1, u) {\n                c(n, i);\n                break;\n            }\n            h >= 0 && e == \":\" && t !== \"\\\\\" && (c(n, i, h + 1), i = h + 2, n += 1);\n        }\n        return o = Object.keys(o).length === lr ? o : null, o;\n    }, Eu = fe.exports.isValidEntry = function(r) {\n        for(var e = {\n            0: function(o) {\n                return o.length > 0;\n            },\n            1: function(o) {\n                return o === \"*\" ? !0 : (o = Number(o), isFinite(o) && o > 0 && o < 9007199254740992 && Math.floor(o) === o);\n            },\n            2: function(o) {\n                return o.length > 0;\n            },\n            3: function(o) {\n                return o.length > 0;\n            },\n            4: function(o) {\n                return o.length > 0;\n            }\n        }, t = 0; t < Fe.length; t += 1){\n            var n = e[t], i = r[Fe[t]] || \"\", s = n(i);\n            if (!s) return !1;\n        }\n        return !0;\n    };\n});\nvar ts = I((bl, pr)=>{\n    \"use strict\";\n    p();\n    var wl = (ir(), U(nr)), es = (or(), U(sr)), mt = Xi();\n    pr.exports = function(r, e) {\n        var t = mt.getFileName();\n        es.stat(t, function(n, i) {\n            if (n || !mt.usePgPass(i, t)) return e(void 0);\n            var s = es.createReadStream(t);\n            mt.getPassword(r, s, e);\n        });\n    };\n    pr.exports.warnTo = mt.warnTo;\n});\nvar dr = I((xl, rs)=>{\n    \"use strict\";\n    p();\n    var vu = ze();\n    function gt(r) {\n        this._types = r || vu, this.text = {}, this.binary = {};\n    }\n    a(gt, \"TypeOverrides\");\n    gt.prototype.getOverrides = function(r) {\n        switch(r){\n            case \"text\":\n                return this.text;\n            case \"binary\":\n                return this.binary;\n            default:\n                return {};\n        }\n    };\n    gt.prototype.setTypeParser = function(r, e, t) {\n        typeof e == \"function\" && (t = e, e = \"text\"), this.getOverrides(e)[r] = t;\n    };\n    gt.prototype.getTypeParser = function(r, e) {\n        return e = e || \"text\", this.getOverrides(e)[r] || this._types.getTypeParser(r, e);\n    };\n    rs.exports = gt;\n});\nvar ns = {};\nY(ns, {\n    default: ()=>_u\n});\nvar _u, is = W(()=>{\n    p();\n    _u = {};\n});\nvar os = I((Al, ss)=>{\n    \"use strict\";\n    p();\n    var Au = (qt(), U(Kn)), yr = (or(), U(sr));\n    function mr(r) {\n        if (r.charAt(0) === \"/\") {\n            var t = r.split(\" \");\n            return {\n                host: t[0],\n                database: t[1]\n            };\n        }\n        var e = Au.parse(/ |%[^a-f0-9]|%[a-f0-9][^a-f0-9]/i.test(r) ? encodeURI(r).replace(/\\%25(\\d\\d)/g, \"%$1\") : r, !0), t = e.query;\n        for(var n in t)Array.isArray(t[n]) && (t[n] = t[n][t[n].length - 1]);\n        var i = (e.auth || \":\").split(\":\");\n        if (t.user = i[0], t.password = i.splice(1).join(\":\"), t.port = e.port, e.protocol == \"socket:\") return t.host = decodeURI(e.pathname), t.database = e.query.db, t.client_encoding = e.query.encoding, t;\n        t.host || (t.host = e.hostname);\n        var s = e.pathname;\n        if (!t.host && s && /^%2f/i.test(s)) {\n            var o = s.split(\"/\");\n            t.host = decodeURIComponent(o[0]), s = o.splice(1).join(\"/\");\n        }\n        switch(s && s.charAt(0) === \"/\" && (s = s.slice(1) || null), t.database = s && decodeURI(s), (t.ssl === \"true\" || t.ssl === \"1\") && (t.ssl = !0), t.ssl === \"0\" && (t.ssl = !1), (t.sslcert || t.sslkey || t.sslrootcert || t.sslmode) && (t.ssl = {}), t.sslcert && (t.ssl.cert = yr.readFileSync(t.sslcert).toString()), t.sslkey && (t.ssl.key = yr.readFileSync(t.sslkey).toString()), t.sslrootcert && (t.ssl.ca = yr.readFileSync(t.sslrootcert).toString()), t.sslmode){\n            case \"disable\":\n                {\n                    t.ssl = !1;\n                    break;\n                }\n            case \"prefer\":\n            case \"require\":\n            case \"verify-ca\":\n            case \"verify-full\":\n                break;\n            case \"no-verify\":\n                {\n                    t.ssl.rejectUnauthorized = !1;\n                    break;\n                }\n        }\n        return t;\n    }\n    a(mr, \"parse\");\n    ss.exports = mr;\n    mr.parse = mr;\n});\nvar wt = I((Tl, cs)=>{\n    \"use strict\";\n    p();\n    var Cu = (is(), U(ns)), us = Ye(), as = os().parse, j = a(function(r, e, t) {\n        return t === void 0 ? t = y.env[\"PG\" + r.toUpperCase()] : t === !1 || (t = y.env[t]), e[r] || t || us[r];\n    }, \"val\"), Iu = a(function() {\n        switch(y.env.PGSSLMODE){\n            case \"disable\":\n                return !1;\n            case \"prefer\":\n            case \"require\":\n            case \"verify-ca\":\n            case \"verify-full\":\n                return !0;\n            case \"no-verify\":\n                return {\n                    rejectUnauthorized: !1\n                };\n        }\n        return us.ssl;\n    }, \"readSSLConfigFromEnvironment\"), Me = a(function(r) {\n        return \"'\" + (\"\" + r).replace(/\\\\/g, \"\\\\\\\\\").replace(/'/g, \"\\\\'\") + \"'\";\n    }, \"quoteParamValue\"), ee = a(function(r, e, t) {\n        var n = e[t];\n        n != null && r.push(t + \"=\" + Me(n));\n    }, \"add\"), wr = class wr {\n        constructor(e){\n            e = typeof e == \"string\" ? as(e) : e || {}, e.connectionString && (e = Object.assign({}, e, as(e.connectionString))), this.user = j(\"user\", e), this.database = j(\"database\", e), this.database === void 0 && (this.database = this.user), this.port = parseInt(j(\"port\", e), 10), this.host = j(\"host\", e), Object.defineProperty(this, \"password\", {\n                configurable: !0,\n                enumerable: !1,\n                writable: !0,\n                value: j(\"password\", e)\n            }), this.binary = j(\"binary\", e), this.options = j(\"options\", e), this.ssl = typeof e.ssl > \"u\" ? Iu() : e.ssl, typeof this.ssl == \"string\" && this.ssl === \"true\" && (this.ssl = !0), this.ssl === \"no-verify\" && (this.ssl = {\n                rejectUnauthorized: !1\n            }), this.ssl && this.ssl.key && Object.defineProperty(this.ssl, \"key\", {\n                enumerable: !1\n            }), this.client_encoding = j(\"client_encoding\", e), this.replication = j(\"replication\", e), this.isDomainSocket = !(this.host || \"\").indexOf(\"/\"), this.application_name = j(\"application_name\", e, \"PGAPPNAME\"), this.fallback_application_name = j(\"fallback_application_name\", e, !1), this.statement_timeout = j(\"statement_timeout\", e, !1), this.lock_timeout = j(\"lock_timeout\", e, !1), this.idle_in_transaction_session_timeout = j(\"idle_in_transaction_session_timeout\", e, !1), this.query_timeout = j(\"query_timeout\", e, !1), e.connectionTimeoutMillis === void 0 ? this.connect_timeout = y.env.PGCONNECT_TIMEOUT || 0 : this.connect_timeout = Math.floor(e.connectionTimeoutMillis / 1e3), e.keepAlive === !1 ? this.keepalives = 0 : e.keepAlive === !0 && (this.keepalives = 1), typeof e.keepAliveInitialDelayMillis == \"number\" && (this.keepalives_idle = Math.floor(e.keepAliveInitialDelayMillis / 1e3));\n        }\n        getLibpqConnectionString(e) {\n            var t = [];\n            ee(t, this, \"user\"), ee(t, this, \"password\"), ee(t, this, \"port\"), ee(t, this, \"application_name\"), ee(t, this, \"fallback_application_name\"), ee(t, this, \"connect_timeout\"), ee(t, this, \"options\");\n            var n = typeof this.ssl == \"object\" ? this.ssl : this.ssl ? {\n                sslmode: this.ssl\n            } : {};\n            if (ee(t, n, \"sslmode\"), ee(t, n, \"sslca\"), ee(t, n, \"sslkey\"), ee(t, n, \"sslcert\"), ee(t, n, \"sslrootcert\"), this.database && t.push(\"dbname=\" + Me(this.database)), this.replication && t.push(\"replication=\" + Me(this.replication)), this.host && t.push(\"host=\" + Me(this.host)), this.isDomainSocket) return e(null, t.join(\" \"));\n            this.client_encoding && t.push(\"client_encoding=\" + Me(this.client_encoding)), Cu.lookup(this.host, function(i, s) {\n                return i ? e(i, null) : (t.push(\"hostaddr=\" + Me(s)), e(null, t.join(\" \")));\n            });\n        }\n    };\n    a(wr, \"ConnectionParameters\");\n    var gr = wr;\n    cs.exports = gr;\n});\nvar fs = I((Ll, ls)=>{\n    \"use strict\";\n    p();\n    var Tu = ze(), hs = /^([A-Za-z]+)(?: (\\d+))?(?: (\\d+))?/, Sr = class Sr {\n        constructor(e, t){\n            this.command = null, this.rowCount = null, this.oid = null, this.rows = [], this.fields = [], this._parsers = void 0, this._types = t, this.RowCtor = null, this.rowAsArray = e === \"array\", this.rowAsArray && (this.parseRow = this._parseRowAsArray);\n        }\n        addCommandComplete(e) {\n            var t;\n            e.text ? t = hs.exec(e.text) : t = hs.exec(e.command), t && (this.command = t[1], t[3] ? (this.oid = parseInt(t[2], 10), this.rowCount = parseInt(t[3], 10)) : t[2] && (this.rowCount = parseInt(t[2], 10)));\n        }\n        _parseRowAsArray(e) {\n            for(var t = new Array(e.length), n = 0, i = e.length; n < i; n++){\n                var s = e[n];\n                s !== null ? t[n] = this._parsers[n](s) : t[n] = null;\n            }\n            return t;\n        }\n        parseRow(e) {\n            for(var t = {}, n = 0, i = e.length; n < i; n++){\n                var s = e[n], o = this.fields[n].name;\n                s !== null ? t[o] = this._parsers[n](s) : t[o] = null;\n            }\n            return t;\n        }\n        addRow(e) {\n            this.rows.push(e);\n        }\n        addFields(e) {\n            this.fields = e, this.fields.length && (this._parsers = new Array(e.length));\n            for(var t = 0; t < e.length; t++){\n                var n = e[t];\n                this._types ? this._parsers[t] = this._types.getTypeParser(n.dataTypeID, n.format || \"text\") : this._parsers[t] = Tu.getTypeParser(n.dataTypeID, n.format || \"text\");\n            }\n        }\n    };\n    a(Sr, \"Result\");\n    var br = Sr;\n    ls.exports = br;\n});\nvar ms = I((Ml, ys)=>{\n    \"use strict\";\n    p();\n    var { EventEmitter: Pu } = ye(), ps = fs(), ds = Ze(), Er = class Er extends Pu {\n        constructor(e, t, n){\n            super(), e = ds.normalizeQueryConfig(e, t, n), this.text = e.text, this.values = e.values, this.rows = e.rows, this.types = e.types, this.name = e.name, this.binary = e.binary, this.portal = e.portal || \"\", this.callback = e.callback, this._rowMode = e.rowMode, y.domain && e.callback && (this.callback = y.domain.bind(e.callback)), this._result = new ps(this._rowMode, this.types), this._results = this._result, this.isPreparedStatement = !1, this._canceledDueToError = !1, this._promise = null;\n        }\n        requiresPreparation() {\n            return this.name || this.rows ? !0 : !this.text || !this.values ? !1 : this.values.length > 0;\n        }\n        _checkForMultirow() {\n            this._result.command && (Array.isArray(this._results) || (this._results = [\n                this._result\n            ]), this._result = new ps(this._rowMode, this.types), this._results.push(this._result));\n        }\n        handleRowDescription(e) {\n            this._checkForMultirow(), this._result.addFields(e.fields), this._accumulateRows = this.callback || !this.listeners(\"row\").length;\n        }\n        handleDataRow(e) {\n            let t;\n            if (!this._canceledDueToError) {\n                try {\n                    t = this._result.parseRow(e.fields);\n                } catch (n) {\n                    this._canceledDueToError = n;\n                    return;\n                }\n                this.emit(\"row\", t, this._result), this._accumulateRows && this._result.addRow(t);\n            }\n        }\n        handleCommandComplete(e, t) {\n            this._checkForMultirow(), this._result.addCommandComplete(e), this.rows && t.sync();\n        }\n        handleEmptyQuery(e) {\n            this.rows && e.sync();\n        }\n        handleError(e, t) {\n            if (this._canceledDueToError && (e = this._canceledDueToError, this._canceledDueToError = !1), this.callback) return this.callback(e);\n            this.emit(\"error\", e);\n        }\n        handleReadyForQuery(e) {\n            if (this._canceledDueToError) return this.handleError(this._canceledDueToError, e);\n            if (this.callback) try {\n                this.callback(null, this._results);\n            } catch (t) {\n                y.nextTick(()=>{\n                    throw t;\n                });\n            }\n            this.emit(\"end\", this._results);\n        }\n        submit(e) {\n            if (typeof this.text != \"string\" && typeof this.name != \"string\") return new Error(\"A query must have either text or a name. Supplying neither is unsupported.\");\n            let t = e.parsedStatements[this.name];\n            return this.text && t && this.text !== t ? new Error(`Prepared statements must be \\\nunique - '${this.name}' was used for a different statement`) : this.values && !Array.isArray(this.values) ? new Error(\"Query values must be an array\") : (this.requiresPreparation() ? this.prepare(e) : e.query(this.text), null);\n        }\n        hasBeenParsed(e) {\n            return this.name && e.parsedStatements[this.name];\n        }\n        handlePortalSuspended(e) {\n            this._getRows(e, this.rows);\n        }\n        _getRows(e, t) {\n            e.execute({\n                portal: this.portal,\n                rows: t\n            }), t ? e.flush() : e.sync();\n        }\n        prepare(e) {\n            this.isPreparedStatement = !0, this.hasBeenParsed(e) || e.parse({\n                text: this.text,\n                name: this.name,\n                types: this.types\n            });\n            try {\n                e.bind({\n                    portal: this.portal,\n                    statement: this.name,\n                    values: this.values,\n                    binary: this.binary,\n                    valueMapper: ds.prepareValue\n                });\n            } catch (t) {\n                this.handleError(t, e);\n                return;\n            }\n            e.describe({\n                type: \"P\",\n                name: this.portal || \"\"\n            }), this._getRows(e, this.rows);\n        }\n        handleCopyInResponse(e) {\n            e.sendCopyFail(\"No source stream defined\");\n        }\n        handleCopyData(e, t) {}\n    };\n    a(Er, \"Query\");\n    var xr = Er;\n    ys.exports = xr;\n});\nvar Zr = I((A)=>{\n    \"use strict\";\n    p();\n    Object.defineProperty(A, \"__esModule\", {\n        value: !0\n    });\n    A.NoticeMessage = A.DataRowMessage = A.CommandCompleteMessage = A.ReadyForQueryMessage = A.NotificationResponseMessage = A.BackendKeyDataMessage = A.AuthenticationMD5Password = A.ParameterStatusMessage = A.ParameterDescriptionMessage = A.RowDescriptionMessage = A.Field = A.CopyResponse = A.CopyDataMessage = A.DatabaseError = A.copyDone = A.emptyQuery = A.replicationStart = A.portalSuspended = A.noData = A.closeComplete = A.bindComplete = A.parseComplete = void 0;\n    A.parseComplete = {\n        name: \"parseComplete\",\n        length: 5\n    };\n    A.bindComplete = {\n        name: \"bindComplete\",\n        length: 5\n    };\n    A.closeComplete = {\n        name: \"closeComplete\",\n        length: 5\n    };\n    A.noData = {\n        name: \"noData\",\n        length: 5\n    };\n    A.portalSuspended = {\n        name: \"portalSuspended\",\n        length: 5\n    };\n    A.replicationStart = {\n        name: \"replicationStart\",\n        length: 4\n    };\n    A.emptyQuery = {\n        name: \"emptyQuery\",\n        length: 4\n    };\n    A.copyDone = {\n        name: \"copyDone\",\n        length: 4\n    };\n    var Ur = class Ur extends Error {\n        constructor(e, t, n){\n            super(e), this.length = t, this.name = n;\n        }\n    };\n    a(Ur, \"DatabaseError\");\n    var vr = Ur;\n    A.DatabaseError = vr;\n    var Or = class Or {\n        constructor(e, t){\n            this.length = e, this.chunk = t, this.name = \"copyData\";\n        }\n    };\n    a(Or, \"CopyDataMessage\");\n    var _r = Or;\n    A.CopyDataMessage = _r;\n    var qr = class qr {\n        constructor(e, t, n, i){\n            this.length = e, this.name = t, this.binary = n, this.columnTypes = new Array(i);\n        }\n    };\n    a(qr, \"CopyResponse\");\n    var Ar = qr;\n    A.CopyResponse = Ar;\n    var Nr = class Nr {\n        constructor(e, t, n, i, s, o, u){\n            this.name = e, this.tableID = t, this.columnID = n, this.dataTypeID = i, this.dataTypeSize = s, this.dataTypeModifier = o, this.format = u;\n        }\n    };\n    a(Nr, \"Field\");\n    var Cr = Nr;\n    A.Field = Cr;\n    var Qr = class Qr {\n        constructor(e, t){\n            this.length = e, this.fieldCount = t, this.name = \"rowDescription\", this.fields = new Array(this.fieldCount);\n        }\n    };\n    a(Qr, \"RowDescriptionMessage\");\n    var Ir = Qr;\n    A.RowDescriptionMessage = Ir;\n    var Wr = class Wr {\n        constructor(e, t){\n            this.length = e, this.parameterCount = t, this.name = \"parameterDescription\", this.dataTypeIDs = new Array(this.parameterCount);\n        }\n    };\n    a(Wr, \"ParameterDescriptionMessage\");\n    var Tr = Wr;\n    A.ParameterDescriptionMessage = Tr;\n    var jr = class jr {\n        constructor(e, t, n){\n            this.length = e, this.parameterName = t, this.parameterValue = n, this.name = \"parameterStatus\";\n        }\n    };\n    a(jr, \"ParameterStatusMessage\");\n    var Pr = jr;\n    A.ParameterStatusMessage = Pr;\n    var Hr = class Hr {\n        constructor(e, t){\n            this.length = e, this.salt = t, this.name = \"authenticationMD5Password\";\n        }\n    };\n    a(Hr, \"AuthenticationMD5Password\");\n    var Br = Hr;\n    A.AuthenticationMD5Password = Br;\n    var Gr = class Gr {\n        constructor(e, t, n){\n            this.length = e, this.processID = t, this.secretKey = n, this.name = \"backendKeyData\";\n        }\n    };\n    a(Gr, \"BackendKeyDataMessage\");\n    var Lr = Gr;\n    A.BackendKeyDataMessage = Lr;\n    var $r = class $r {\n        constructor(e, t, n, i){\n            this.length = e, this.processId = t, this.channel = n, this.payload = i, this.name = \"notification\";\n        }\n    };\n    a($r, \"NotificationResponseMessage\");\n    var Rr = $r;\n    A.NotificationResponseMessage = Rr;\n    var Kr = class Kr {\n        constructor(e, t){\n            this.length = e, this.status = t, this.name = \"readyForQuery\";\n        }\n    };\n    a(Kr, \"ReadyForQueryMessage\");\n    var Fr = Kr;\n    A.ReadyForQueryMessage = Fr;\n    var Vr = class Vr {\n        constructor(e, t){\n            this.length = e, this.text = t, this.name = \"commandComplete\";\n        }\n    };\n    a(Vr, \"CommandCompleteMessage\");\n    var Mr = Vr;\n    A.CommandCompleteMessage = Mr;\n    var zr = class zr {\n        constructor(e, t){\n            this.length = e, this.fields = t, this.name = \"dataRow\", this.fieldCount = t.length;\n        }\n    };\n    a(zr, \"DataRowMessage\");\n    var Dr = zr;\n    A.DataRowMessage = Dr;\n    var Yr = class Yr {\n        constructor(e, t){\n            this.length = e, this.message = t, this.name = \"notice\";\n        }\n    };\n    a(Yr, \"NoticeMessage\");\n    var kr = Yr;\n    A.NoticeMessage = kr;\n});\nvar gs = I((bt)=>{\n    \"use strict\";\n    p();\n    Object.defineProperty(bt, \"__esModule\", {\n        value: !0\n    });\n    bt.Writer = void 0;\n    var Xr = class Xr {\n        constructor(e = 256){\n            this.size = e, this.offset = 5, this.headerPosition = 0, this.buffer = d.allocUnsafe(e);\n        }\n        ensure(e) {\n            var t = this.buffer.length - this.offset;\n            if (t < e) {\n                var n = this.buffer, i = n.length + (n.length >> 1) + e;\n                this.buffer = d.allocUnsafe(i), n.copy(this.buffer);\n            }\n        }\n        addInt32(e) {\n            return this.ensure(4), this.buffer[this.offset++] = e >>> 24 & 255, this.buffer[this.offset++] = e >>> 16 & 255, this.buffer[this.offset++] = e >>> 8 & 255, this.buffer[this.offset++] = e >>> 0 & 255, this;\n        }\n        addInt16(e) {\n            return this.ensure(2), this.buffer[this.offset++] = e >>> 8 & 255, this.buffer[this.offset++] = e >>> 0 & 255, this;\n        }\n        addCString(e) {\n            if (!e) this.ensure(1);\n            else {\n                var t = d.byteLength(e);\n                this.ensure(t + 1), this.buffer.write(e, this.offset, \"utf-8\"), this.offset += t;\n            }\n            return this.buffer[this.offset++] = 0, this;\n        }\n        addString(e = \"\") {\n            var t = d.byteLength(e);\n            return this.ensure(t), this.buffer.write(e, this.offset), this.offset += t, this;\n        }\n        add(e) {\n            return this.ensure(e.length), e.copy(this.buffer, this.offset), this.offset += e.length, this;\n        }\n        join(e) {\n            if (e) {\n                this.buffer[this.headerPosition] = e;\n                let t = this.offset - (this.headerPosition + 1);\n                this.buffer.writeInt32BE(t, this.headerPosition + 1);\n            }\n            return this.buffer.slice(e ? 0 : 5, this.offset);\n        }\n        flush(e) {\n            var t = this.join(e);\n            return this.offset = 5, this.headerPosition = 0, this.buffer = d.allocUnsafe(this.size), t;\n        }\n    };\n    a(Xr, \"Writer\");\n    var Jr = Xr;\n    bt.Writer = Jr;\n});\nvar bs = I((xt)=>{\n    \"use strict\";\n    p();\n    Object.defineProperty(xt, \"__esModule\", {\n        value: !0\n    });\n    xt.serialize = void 0;\n    var en = gs(), M = new en.Writer, Bu = a((r)=>{\n        M.addInt16(3).addInt16(0);\n        for (let n of Object.keys(r))M.addCString(n).addCString(r[n]);\n        M.addCString(\"client_encoding\").addCString(\"UTF8\");\n        var e = M.addCString(\"\").flush(), t = e.length + 4;\n        return new en.Writer().addInt32(t).add(e).flush();\n    }, \"startup\"), Lu = a(()=>{\n        let r = d.allocUnsafe(8);\n        return r.writeInt32BE(8, 0), r.writeInt32BE(80877103, 4), r;\n    }, \"requestSsl\"), Ru = a((r)=>M.addCString(r).flush(112), \"password\"), Fu = a(function(r, e) {\n        return M.addCString(r).addInt32(d.byteLength(e)).addString(e), M.flush(112);\n    }, \"sendSASLInitialResponseMessage\"), Mu = a(function(r) {\n        return M.addString(r).flush(112);\n    }, \"sendSCRAMClientFinalMessage\"), Du = a((r)=>M.addCString(r).flush(81), \"query\"), ws = [], ku = a((r)=>{\n        let e = r.name || \"\";\n        e.length > 63 && (console.error(\"Warning! Postgres only supports 63 characters for query names.\"), console.error(\"You supplied %s (%s)\", e, e.length), console.error(\"This can cause conflicts and silent errors executing queries\"));\n        let t = r.types || ws;\n        for(var n = t.length, i = M.addCString(e).addCString(r.text).addInt16(n), s = 0; s < n; s++)i.addInt32(t[s]);\n        return M.flush(80);\n    }, \"parse\"), De = new en.Writer, Uu = a(function(r, e) {\n        for(let t = 0; t < r.length; t++){\n            let n = e ? e(r[t], t) : r[t];\n            n == null ? (M.addInt16(0), De.addInt32(-1)) : n instanceof d ? (M.addInt16(1), De.addInt32(n.length), De.add(n)) : (M.addInt16(0), De.addInt32(d.byteLength(n)), De.addString(n));\n        }\n    }, \"writeValues\"), Ou = a((r = {})=>{\n        let e = r.portal || \"\", t = r.statement || \"\", n = r.binary || !1, i = r.values || ws, s = i.length;\n        return M.addCString(e).addCString(t), M.addInt16(s), Uu(i, r.valueMapper), M.addInt16(s), M.add(De.flush()), M.addInt16(n ? 1 : 0), M.flush(66);\n    }, \"bind\"), qu = d.from([\n        69,\n        0,\n        0,\n        0,\n        9,\n        0,\n        0,\n        0,\n        0,\n        0\n    ]), Nu = a((r)=>{\n        if (!r || !r.portal && !r.rows) return qu;\n        let e = r.portal || \"\", t = r.rows || 0, n = d.byteLength(e), i = 4 + n + 1 + 4, s = d.allocUnsafe(1 + i);\n        return s[0] = 69, s.writeInt32BE(i, 1), s.write(e, 5, \"utf-8\"), s[n + 5] = 0, s.writeUInt32BE(t, s.length - 4), s;\n    }, \"execute\"), Qu = a((r, e)=>{\n        let t = d.allocUnsafe(16);\n        return t.writeInt32BE(16, 0), t.writeInt16BE(1234, 4), t.writeInt16BE(5678, 6), t.writeInt32BE(r, 8), t.writeInt32BE(e, 12), t;\n    }, \"cancel\"), tn = a((r, e)=>{\n        let n = 4 + d.byteLength(e) + 1, i = d.allocUnsafe(1 + n);\n        return i[0] = r, i.writeInt32BE(n, 1), i.write(e, 5, \"utf-8\"), i[n] = 0, i;\n    }, \"cstringMessage\"), Wu = M.addCString(\"P\").flush(68), ju = M.addCString(\"S\").flush(68), Hu = a((r)=>r.name ? tn(68, `${r.type}${r.name || \"\"}`) : r.type === \"P\" ? Wu : ju, \"describe\"), Gu = a((r)=>{\n        let e = `${r.type}${r.name || \"\"}`;\n        return tn(67, e);\n    }, \"close\"), $u = a((r)=>M.add(r).flush(100), \"copyData\"), Ku = a((r)=>tn(102, r), \"copyFail\"), St = a((r)=>d.from([\n            r,\n            0,\n            0,\n            0,\n            4\n        ]), \"codeOnlyBuffer\"), Vu = St(72), zu = St(83), Yu = St(88), Zu = St(99), Ju = {\n        startup: Bu,\n        password: Ru,\n        requestSsl: Lu,\n        sendSASLInitialResponseMessage: Fu,\n        sendSCRAMClientFinalMessage: Mu,\n        query: Du,\n        parse: ku,\n        bind: Ou,\n        execute: Nu,\n        describe: Hu,\n        close: Gu,\n        flush: ()=>Vu,\n        sync: ()=>zu,\n        end: ()=>Yu,\n        copyData: $u,\n        copyDone: ()=>Zu,\n        copyFail: Ku,\n        cancel: Qu\n    };\n    xt.serialize = Ju;\n});\nvar Ss = I((Et)=>{\n    \"use strict\";\n    p();\n    Object.defineProperty(Et, \"__esModule\", {\n        value: !0\n    });\n    Et.BufferReader = void 0;\n    var Xu = d.allocUnsafe(0), nn = class nn {\n        constructor(e = 0){\n            this.offset = e, this.buffer = Xu, this.encoding = \"utf-8\";\n        }\n        setBuffer(e, t) {\n            this.offset = e, this.buffer = t;\n        }\n        int16() {\n            let e = this.buffer.readInt16BE(this.offset);\n            return this.offset += 2, e;\n        }\n        byte() {\n            let e = this.buffer[this.offset];\n            return this.offset++, e;\n        }\n        int32() {\n            let e = this.buffer.readInt32BE(this.offset);\n            return this.offset += 4, e;\n        }\n        string(e) {\n            let t = this.buffer.toString(this.encoding, this.offset, this.offset + e);\n            return this.offset += e, t;\n        }\n        cstring() {\n            let e = this.offset, t = e;\n            for(; this.buffer[t++] !== 0;);\n            return this.offset = t, this.buffer.toString(this.encoding, e, t - 1);\n        }\n        bytes(e) {\n            let t = this.buffer.slice(this.offset, this.offset + e);\n            return this.offset += e, t;\n        }\n    };\n    a(nn, \"BufferReader\");\n    var rn = nn;\n    Et.BufferReader = rn;\n});\nvar xs = {};\nY(xs, {\n    default: ()=>ec\n});\nvar ec, Es = W(()=>{\n    p();\n    ec = {};\n});\nvar As = I((ke)=>{\n    \"use strict\";\n    p();\n    var tc = ke && ke.__importDefault || function(r) {\n        return r && r.__esModule ? r : {\n            default: r\n        };\n    };\n    Object.defineProperty(ke, \"__esModule\", {\n        value: !0\n    });\n    ke.Parser = void 0;\n    var D = Zr(), rc = Ss(), nc = tc((Es(), U(xs))), sn = 1, ic = 4, vs = sn + ic, _s = d.allocUnsafe(0), an = class an {\n        constructor(e){\n            if (this.buffer = _s, this.bufferLength = 0, this.bufferOffset = 0, this.reader = new rc.BufferReader, e?.mode === \"binary\") throw new Error(\"Binary mode not supported yet\");\n            this.mode = e?.mode || \"text\";\n        }\n        parse(e, t) {\n            this.mergeBuffer(e);\n            let n = this.bufferOffset + this.bufferLength, i = this.bufferOffset;\n            for(; i + vs <= n;){\n                let s = this.buffer[i], o = this.buffer.readUInt32BE(i + sn), u = sn + o;\n                if (u + i <= n) {\n                    let c = this.handlePacket(i + vs, s, o, this.buffer);\n                    t(c), i += u;\n                } else break;\n            }\n            i === n ? (this.buffer = _s, this.bufferLength = 0, this.bufferOffset = 0) : (this.bufferLength = n - i, this.bufferOffset = i);\n        }\n        mergeBuffer(e) {\n            if (this.bufferLength > 0) {\n                let t = this.bufferLength + e.byteLength;\n                if (t + this.bufferOffset > this.buffer.byteLength) {\n                    let i;\n                    if (t <= this.buffer.byteLength && this.bufferOffset >= this.bufferLength) i = this.buffer;\n                    else {\n                        let s = this.buffer.byteLength * 2;\n                        for(; t >= s;)s *= 2;\n                        i = d.allocUnsafe(s);\n                    }\n                    this.buffer.copy(i, 0, this.bufferOffset, this.bufferOffset + this.bufferLength), this.buffer = i, this.bufferOffset = 0;\n                }\n                e.copy(this.buffer, this.bufferOffset + this.bufferLength), this.bufferLength = t;\n            } else this.buffer = e, this.bufferOffset = 0, this.bufferLength = e.byteLength;\n        }\n        handlePacket(e, t, n, i) {\n            switch(t){\n                case 50:\n                    return D.bindComplete;\n                case 49:\n                    return D.parseComplete;\n                case 51:\n                    return D.closeComplete;\n                case 110:\n                    return D.noData;\n                case 115:\n                    return D.portalSuspended;\n                case 99:\n                    return D.copyDone;\n                case 87:\n                    return D.replicationStart;\n                case 73:\n                    return D.emptyQuery;\n                case 68:\n                    return this.parseDataRowMessage(e, n, i);\n                case 67:\n                    return this.parseCommandCompleteMessage(e, n, i);\n                case 90:\n                    return this.parseReadyForQueryMessage(e, n, i);\n                case 65:\n                    return this.parseNotificationMessage(e, n, i);\n                case 82:\n                    return this.parseAuthenticationResponse(e, n, i);\n                case 83:\n                    return this.parseParameterStatusMessage(e, n, i);\n                case 75:\n                    return this.parseBackendKeyData(e, n, i);\n                case 69:\n                    return this.parseErrorMessage(e, n, i, \"error\");\n                case 78:\n                    return this.parseErrorMessage(e, n, i, \"notice\");\n                case 84:\n                    return this.parseRowDescriptionMessage(e, n, i);\n                case 116:\n                    return this.parseParameterDescriptionMessage(e, n, i);\n                case 71:\n                    return this.parseCopyInMessage(e, n, i);\n                case 72:\n                    return this.parseCopyOutMessage(e, n, i);\n                case 100:\n                    return this.parseCopyData(e, n, i);\n                default:\n                    nc.default.fail(`unknown message code: ${t.toString(16)}`);\n            }\n        }\n        parseReadyForQueryMessage(e, t, n) {\n            this.reader.setBuffer(e, n);\n            let i = this.reader.string(1);\n            return new D.ReadyForQueryMessage(t, i);\n        }\n        parseCommandCompleteMessage(e, t, n) {\n            this.reader.setBuffer(e, n);\n            let i = this.reader.cstring();\n            return new D.CommandCompleteMessage(t, i);\n        }\n        parseCopyData(e, t, n) {\n            let i = n.slice(e, e + (t - 4));\n            return new D.CopyDataMessage(t, i);\n        }\n        parseCopyInMessage(e, t, n) {\n            return this.parseCopyMessage(e, t, n, \"copyInResponse\");\n        }\n        parseCopyOutMessage(e, t, n) {\n            return this.parseCopyMessage(e, t, n, \"copyOutResponse\");\n        }\n        parseCopyMessage(e, t, n, i) {\n            this.reader.setBuffer(e, n);\n            let s = this.reader.byte() !== 0, o = this.reader.int16(), u = new D.CopyResponse(t, i, s, o);\n            for(let c = 0; c < o; c++)u.columnTypes[c] = this.reader.int16();\n            return u;\n        }\n        parseNotificationMessage(e, t, n) {\n            this.reader.setBuffer(e, n);\n            let i = this.reader.int32(), s = this.reader.cstring(), o = this.reader.cstring();\n            return new D.NotificationResponseMessage(t, i, s, o);\n        }\n        parseRowDescriptionMessage(e, t, n) {\n            this.reader.setBuffer(e, n);\n            let i = this.reader.int16(), s = new D.RowDescriptionMessage(t, i);\n            for(let o = 0; o < i; o++)s.fields[o] = this.parseField();\n            return s;\n        }\n        parseField() {\n            let e = this.reader.cstring(), t = this.reader.int32(), n = this.reader.int16(), i = this.reader.int32(), s = this.reader.int16(), o = this.reader.int32(), u = this.reader.int16() === 0 ? \"text\" : \"binary\";\n            return new D.Field(e, t, n, i, s, o, u);\n        }\n        parseParameterDescriptionMessage(e, t, n) {\n            this.reader.setBuffer(e, n);\n            let i = this.reader.int16(), s = new D.ParameterDescriptionMessage(t, i);\n            for(let o = 0; o < i; o++)s.dataTypeIDs[o] = this.reader.int32();\n            return s;\n        }\n        parseDataRowMessage(e, t, n) {\n            this.reader.setBuffer(e, n);\n            let i = this.reader.int16(), s = new Array(i);\n            for(let o = 0; o < i; o++){\n                let u = this.reader.int32();\n                s[o] = u === -1 ? null : this.reader.string(u);\n            }\n            return new D.DataRowMessage(t, s);\n        }\n        parseParameterStatusMessage(e, t, n) {\n            this.reader.setBuffer(e, n);\n            let i = this.reader.cstring(), s = this.reader.cstring();\n            return new D.ParameterStatusMessage(t, i, s);\n        }\n        parseBackendKeyData(e, t, n) {\n            this.reader.setBuffer(e, n);\n            let i = this.reader.int32(), s = this.reader.int32();\n            return new D.BackendKeyDataMessage(t, i, s);\n        }\n        parseAuthenticationResponse(e, t, n) {\n            this.reader.setBuffer(e, n);\n            let i = this.reader.int32(), s = {\n                name: \"authenticationOk\",\n                length: t\n            };\n            switch(i){\n                case 0:\n                    break;\n                case 3:\n                    s.length === 8 && (s.name = \"authenticationCleartextPassword\");\n                    break;\n                case 5:\n                    if (s.length === 12) {\n                        s.name = \"authenticationMD5Password\";\n                        let u = this.reader.bytes(4);\n                        return new D.AuthenticationMD5Password(t, u);\n                    }\n                    break;\n                case 10:\n                    s.name = \"authenticationSASL\", s.mechanisms = [];\n                    let o;\n                    do o = this.reader.cstring(), o && s.mechanisms.push(o);\n                    while (o);\n                    break;\n                case 11:\n                    s.name = \"authenticationSASLContinue\", s.data = this.reader.string(t - 8);\n                    break;\n                case 12:\n                    s.name = \"authenticationSASLFinal\", s.data = this.reader.string(t - 8);\n                    break;\n                default:\n                    throw new Error(\"Unknown authenticationOk message type \" + i);\n            }\n            return s;\n        }\n        parseErrorMessage(e, t, n, i) {\n            this.reader.setBuffer(e, n);\n            let s = {}, o = this.reader.string(1);\n            for(; o !== \"\\x00\";)s[o] = this.reader.cstring(), o = this.reader.string(1);\n            let u = s.M, c = i === \"notice\" ? new D.NoticeMessage(t, u) : new D.DatabaseError(u, t, i);\n            return c.severity = s.S, c.code = s.C, c.detail = s.D, c.hint = s.H, c.position = s.P, c.internalPosition = s.p, c.internalQuery = s.q, c.where = s.W, c.schema = s.s, c.table = s.t, c.column = s.c, c.dataType = s.d, c.constraint = s.n, c.file = s.F, c.line = s.L, c.routine = s.R, c;\n        }\n    };\n    a(an, \"Parser\");\n    var on = an;\n    ke.Parser = on;\n});\nvar un = I((we)=>{\n    \"use strict\";\n    p();\n    Object.defineProperty(we, \"__esModule\", {\n        value: !0\n    });\n    we.DatabaseError = we.serialize = we.parse = void 0;\n    var sc = Zr();\n    Object.defineProperty(we, \"DatabaseError\", {\n        enumerable: !0,\n        get: function() {\n            return sc.DatabaseError;\n        }\n    });\n    var oc = bs();\n    Object.defineProperty(we, \"serialize\", {\n        enumerable: !0,\n        get: function() {\n            return oc.serialize;\n        }\n    });\n    var ac = As();\n    function uc(r, e) {\n        let t = new ac.Parser;\n        return r.on(\"data\", (n)=>t.parse(n, e)), new Promise((n)=>r.on(\"end\", ()=>n()));\n    }\n    a(uc, \"parse\");\n    we.parse = uc;\n});\nvar Cs = {};\nY(Cs, {\n    connect: ()=>cc\n});\nfunction cc({ socket: r, servername: e }) {\n    return r.startTls(e), r;\n}\nvar Is = W(()=>{\n    p();\n    a(cc, \"connect\");\n});\nvar ln = I((sf, Bs)=>{\n    \"use strict\";\n    p();\n    var Ts = (ut(), U(si)), hc = ye().EventEmitter, { parse: lc, serialize: N } = un(), Ps = N.flush(), fc = N.sync(), pc = N.end(), hn = class hn extends hc {\n        constructor(e){\n            super(), e = e || {}, this.stream = e.stream || new Ts.Socket, this._keepAlive = e.keepAlive, this._keepAliveInitialDelayMillis = e.keepAliveInitialDelayMillis, this.lastBuffer = !1, this.parsedStatements = {}, this.ssl = e.ssl || !1, this._ending = !1, this._emitMessage = !1;\n            var t = this;\n            this.on(\"newListener\", function(n) {\n                n === \"message\" && (t._emitMessage = !0);\n            });\n        }\n        connect(e, t) {\n            var n = this;\n            this._connecting = !0, this.stream.setNoDelay(!0), this.stream.connect(e, t), this.stream.once(\"connect\", function() {\n                n._keepAlive && n.stream.setKeepAlive(!0, n._keepAliveInitialDelayMillis), n.emit(\"connect\");\n            });\n            let i = a(function(s) {\n                n._ending && (s.code === \"ECONNRESET\" || s.code === \"EPIPE\") || n.emit(\"error\", s);\n            }, \"reportStreamError\");\n            if (this.stream.on(\"error\", i), this.stream.on(\"close\", function() {\n                n.emit(\"end\");\n            }), !this.ssl) return this.attachListeners(this.stream);\n            this.stream.once(\"data\", function(s) {\n                var o = s.toString(\"utf8\");\n                switch(o){\n                    case \"S\":\n                        break;\n                    case \"N\":\n                        return n.stream.end(), n.emit(\"error\", new Error(\"The server does not support SSL connections\"));\n                    default:\n                        return n.stream.end(), n.emit(\"error\", new Error(\"There was an error establishing an SSL connection\"));\n                }\n                var u = (Is(), U(Cs));\n                let c = {\n                    socket: n.stream\n                };\n                n.ssl !== !0 && (Object.assign(c, n.ssl), \"key\" in n.ssl && (c.key = n.ssl.key)), Ts.isIP(t) === 0 && (c.servername = t);\n                try {\n                    n.stream = u.connect(c);\n                } catch (h) {\n                    return n.emit(\"error\", h);\n                }\n                n.attachListeners(n.stream), n.stream.on(\"error\", i), n.emit(\"sslconnect\");\n            });\n        }\n        attachListeners(e) {\n            e.on(\"end\", ()=>{\n                this.emit(\"end\");\n            }), lc(e, (t)=>{\n                var n = t.name === \"error\" ? \"errorMessage\" : t.name;\n                this._emitMessage && this.emit(\"message\", t), this.emit(n, t);\n            });\n        }\n        requestSsl() {\n            this.stream.write(N.requestSsl());\n        }\n        startup(e) {\n            this.stream.write(N.startup(e));\n        }\n        cancel(e, t) {\n            this._send(N.cancel(e, t));\n        }\n        password(e) {\n            this._send(N.password(e));\n        }\n        sendSASLInitialResponseMessage(e, t) {\n            this._send(N.sendSASLInitialResponseMessage(e, t));\n        }\n        sendSCRAMClientFinalMessage(e) {\n            this._send(N.sendSCRAMClientFinalMessage(e));\n        }\n        _send(e) {\n            return this.stream.writable ? this.stream.write(e) : !1;\n        }\n        query(e) {\n            this._send(N.query(e));\n        }\n        parse(e) {\n            this._send(N.parse(e));\n        }\n        bind(e) {\n            this._send(N.bind(e));\n        }\n        execute(e) {\n            this._send(N.execute(e));\n        }\n        flush() {\n            this.stream.writable && this.stream.write(Ps);\n        }\n        sync() {\n            this._ending = !0, this._send(Ps), this._send(fc);\n        }\n        ref() {\n            this.stream.ref();\n        }\n        unref() {\n            this.stream.unref();\n        }\n        end() {\n            if (this._ending = !0, !this._connecting || !this.stream.writable) {\n                this.stream.end();\n                return;\n            }\n            return this.stream.write(pc, ()=>{\n                this.stream.end();\n            });\n        }\n        close(e) {\n            this._send(N.close(e));\n        }\n        describe(e) {\n            this._send(N.describe(e));\n        }\n        sendCopyFromChunk(e) {\n            this._send(N.copyData(e));\n        }\n        endCopyFrom() {\n            this._send(N.copyDone());\n        }\n        sendCopyFail(e) {\n            this._send(N.copyFail(e));\n        }\n    };\n    a(hn, \"Connection\");\n    var cn = hn;\n    Bs.exports = cn;\n});\nvar Fs = I((cf, Rs)=>{\n    \"use strict\";\n    p();\n    var dc = ye().EventEmitter, uf = (et(), U(Xe)), yc = Ze(), fn = Hi(), mc = ts(), gc = dr(), wc = wt(), Ls = ms(), bc = Ye(), Sc = ln(), pn = class pn extends dc {\n        constructor(e){\n            super(), this.connectionParameters = new wc(e), this.user = this.connectionParameters.user, this.database = this.connectionParameters.database, this.port = this.connectionParameters.port, this.host = this.connectionParameters.host, Object.defineProperty(this, \"password\", {\n                configurable: !0,\n                enumerable: !1,\n                writable: !0,\n                value: this.connectionParameters.password\n            }), this.replication = this.connectionParameters.replication;\n            var t = e || {};\n            this._Promise = t.Promise || w.Promise, this._types = new gc(t.types), this._ending = !1, this._connecting = !1, this._connected = !1, this._connectionError = !1, this._queryable = !0, this.connection = t.connection || new Sc({\n                stream: t.stream,\n                ssl: this.connectionParameters.ssl,\n                keepAlive: t.keepAlive || !1,\n                keepAliveInitialDelayMillis: t.keepAliveInitialDelayMillis || 0,\n                encoding: this.connectionParameters.client_encoding || \"utf8\"\n            }), this.queryQueue = [], this.binary = t.binary || bc.binary, this.processID = null, this.secretKey = null, this.ssl = this.connectionParameters.ssl || !1, this.ssl && this.ssl.key && Object.defineProperty(this.ssl, \"key\", {\n                enumerable: !1\n            }), this._connectionTimeoutMillis = t.connectionTimeoutMillis || 0;\n        }\n        _errorAllQueries(e) {\n            let t = a((n)=>{\n                y.nextTick(()=>{\n                    n.handleError(e, this.connection);\n                });\n            }, \"enqueueError\");\n            this.activeQuery && (t(this.activeQuery), this.activeQuery = null), this.queryQueue.forEach(t), this.queryQueue.length = 0;\n        }\n        _connect(e) {\n            var t = this, n = this.connection;\n            if (this._connectionCallback = e, this._connecting || this._connected) {\n                let i = new Error(\"Client has already been connected. You cannot reuse a client.\");\n                y.nextTick(()=>{\n                    e(i);\n                });\n                return;\n            }\n            this._connecting = !0, this.connectionTimeoutHandle, this._connectionTimeoutMillis > 0 && (this.connectionTimeoutHandle = setTimeout(()=>{\n                n._ending = !0, n.stream.destroy(new Error(\"timeout expired\"));\n            }, this._connectionTimeoutMillis)), this.host && this.host.indexOf(\"/\") === 0 ? n.connect(this.host + \"/.s.PGSQL.\" + this.port) : n.connect(this.port, this.host), n.on(\"connect\", function() {\n                t.ssl ? n.requestSsl() : n.startup(t.getStartupConf());\n            }), n.on(\"sslconnect\", function() {\n                n.startup(t.getStartupConf());\n            }), this._attachListeners(n), n.once(\"end\", ()=>{\n                let i = this._ending ? new Error(\"Connection terminated\") : new Error(\"Connection terminated unexpectedly\");\n                clearTimeout(this.connectionTimeoutHandle), this._errorAllQueries(i), this._ending || (this._connecting && !this._connectionError ? this._connectionCallback ? this._connectionCallback(i) : this._handleErrorEvent(i) : this._connectionError || this._handleErrorEvent(i)), y.nextTick(()=>{\n                    this.emit(\"end\");\n                });\n            });\n        }\n        connect(e) {\n            if (e) {\n                this._connect(e);\n                return;\n            }\n            return new this._Promise((t, n)=>{\n                this._connect((i)=>{\n                    i ? n(i) : t();\n                });\n            });\n        }\n        _attachListeners(e) {\n            e.on(\"authenticationCleartextPassword\", this._handleAuthCleartextPassword.bind(this)), e.on(\"authenticationMD5Password\", this._handleAuthMD5Password.bind(this)), e.on(\"authenticationSASL\", this._handleAuthSASL.bind(this)), e.on(\"authenticationSASLContinue\", this._handleAuthSASLContinue.bind(this)), e.on(\"authenticationSASLFinal\", this._handleAuthSASLFinal.bind(this)), e.on(\"backendKeyData\", this._handleBackendKeyData.bind(this)), e.on(\"error\", this._handleErrorEvent.bind(this)), e.on(\"errorMessage\", this._handleErrorMessage.bind(this)), e.on(\"readyForQuery\", this._handleReadyForQuery.bind(this)), e.on(\"notice\", this._handleNotice.bind(this)), e.on(\"rowDescription\", this._handleRowDescription.bind(this)), e.on(\"dataRow\", this._handleDataRow.bind(this)), e.on(\"portalSuspended\", this._handlePortalSuspended.bind(this)), e.on(\"emptyQuery\", this._handleEmptyQuery.bind(this)), e.on(\"commandComplete\", this._handleCommandComplete.bind(this)), e.on(\"parseComplete\", this._handleParseComplete.bind(this)), e.on(\"copyInResponse\", this._handleCopyInResponse.bind(this)), e.on(\"copyData\", this._handleCopyData.bind(this)), e.on(\"notification\", this._handleNotification.bind(this));\n        }\n        _checkPgPass(e) {\n            let t = this.connection;\n            typeof this.password == \"function\" ? this._Promise.resolve().then(()=>this.password()).then((n)=>{\n                if (n !== void 0) {\n                    if (typeof n != \"string\") {\n                        t.emit(\"error\", new TypeError(\"Password must be a string\"));\n                        return;\n                    }\n                    this.connectionParameters.password = this.password = n;\n                } else this.connectionParameters.password = this.password = null;\n                e();\n            }).catch((n)=>{\n                t.emit(\"error\", n);\n            }) : this.password !== null ? e() : mc(this.connectionParameters, (n)=>{\n                n !== void 0 && (this.connectionParameters.password = this.password = n), e();\n            });\n        }\n        _handleAuthCleartextPassword(e) {\n            this._checkPgPass(()=>{\n                this.connection.password(this.password);\n            });\n        }\n        _handleAuthMD5Password(e) {\n            this._checkPgPass(()=>{\n                let t = yc.postgresMd5PasswordHash(this.user, this.password, e.salt);\n                this.connection.password(t);\n            });\n        }\n        _handleAuthSASL(e) {\n            this._checkPgPass(()=>{\n                this.saslSession = fn.startSession(e.mechanisms), this.connection.sendSASLInitialResponseMessage(this.saslSession.mechanism, this.saslSession.response);\n            });\n        }\n        _handleAuthSASLContinue(e) {\n            fn.continueSession(this.saslSession, this.password, e.data), this.connection.sendSCRAMClientFinalMessage(this.saslSession.response);\n        }\n        _handleAuthSASLFinal(e) {\n            fn.finalizeSession(this.saslSession, e.data), this.saslSession = null;\n        }\n        _handleBackendKeyData(e) {\n            this.processID = e.processID, this.secretKey = e.secretKey;\n        }\n        _handleReadyForQuery(e) {\n            this._connecting && (this._connecting = !1, this._connected = !0, clearTimeout(this.connectionTimeoutHandle), this._connectionCallback && (this._connectionCallback(null, this), this._connectionCallback = null), this.emit(\"connect\"));\n            let { activeQuery: t } = this;\n            this.activeQuery = null, this.readyForQuery = !0, t && t.handleReadyForQuery(this.connection), this._pulseQueryQueue();\n        }\n        _handleErrorWhileConnecting(e) {\n            if (!this._connectionError) {\n                if (this._connectionError = !0, clearTimeout(this.connectionTimeoutHandle), this._connectionCallback) return this._connectionCallback(e);\n                this.emit(\"error\", e);\n            }\n        }\n        _handleErrorEvent(e) {\n            if (this._connecting) return this._handleErrorWhileConnecting(e);\n            this._queryable = !1, this._errorAllQueries(e), this.emit(\"error\", e);\n        }\n        _handleErrorMessage(e) {\n            if (this._connecting) return this._handleErrorWhileConnecting(e);\n            let t = this.activeQuery;\n            if (!t) {\n                this._handleErrorEvent(e);\n                return;\n            }\n            this.activeQuery = null, t.handleError(e, this.connection);\n        }\n        _handleRowDescription(e) {\n            this.activeQuery.handleRowDescription(e);\n        }\n        _handleDataRow(e) {\n            this.activeQuery.handleDataRow(e);\n        }\n        _handlePortalSuspended(e) {\n            this.activeQuery.handlePortalSuspended(this.connection);\n        }\n        _handleEmptyQuery(e) {\n            this.activeQuery.handleEmptyQuery(this.connection);\n        }\n        _handleCommandComplete(e) {\n            this.activeQuery.handleCommandComplete(e, this.connection);\n        }\n        _handleParseComplete(e) {\n            this.activeQuery.name && (this.connection.parsedStatements[this.activeQuery.name] = this.activeQuery.text);\n        }\n        _handleCopyInResponse(e) {\n            this.activeQuery.handleCopyInResponse(this.connection);\n        }\n        _handleCopyData(e) {\n            this.activeQuery.handleCopyData(e, this.connection);\n        }\n        _handleNotification(e) {\n            this.emit(\"notification\", e);\n        }\n        _handleNotice(e) {\n            this.emit(\"notice\", e);\n        }\n        getStartupConf() {\n            var e = this.connectionParameters, t = {\n                user: e.user,\n                database: e.database\n            }, n = e.application_name || e.fallback_application_name;\n            return n && (t.application_name = n), e.replication && (t.replication = \"\" + e.replication), e.statement_timeout && (t.statement_timeout = String(parseInt(e.statement_timeout, 10))), e.lock_timeout && (t.lock_timeout = String(parseInt(e.lock_timeout, 10))), e.idle_in_transaction_session_timeout && (t.idle_in_transaction_session_timeout = String(parseInt(e.idle_in_transaction_session_timeout, 10))), e.options && (t.options = e.options), t;\n        }\n        cancel(e, t) {\n            if (e.activeQuery === t) {\n                var n = this.connection;\n                this.host && this.host.indexOf(\"/\") === 0 ? n.connect(this.host + \"/.s.PGSQL.\" + this.port) : n.connect(this.port, this.host), n.on(\"connect\", function() {\n                    n.cancel(e.processID, e.secretKey);\n                });\n            } else e.queryQueue.indexOf(t) !== -1 && e.queryQueue.splice(e.queryQueue.indexOf(t), 1);\n        }\n        setTypeParser(e, t, n) {\n            return this._types.setTypeParser(e, t, n);\n        }\n        getTypeParser(e, t) {\n            return this._types.getTypeParser(e, t);\n        }\n        escapeIdentifier(e) {\n            return '\"' + e.replace(/\"/g, '\"\"') + '\"';\n        }\n        escapeLiteral(e) {\n            for(var t = !1, n = \"'\", i = 0; i < e.length; i++){\n                var s = e[i];\n                s === \"'\" ? n += s + s : s === \"\\\\\" ? (n += s + s, t = !0) : n += s;\n            }\n            return n += \"'\", t === !0 && (n = \" E\" + n), n;\n        }\n        _pulseQueryQueue() {\n            if (this.readyForQuery === !0) if (this.activeQuery = this.queryQueue.shift(), this.activeQuery) {\n                this.readyForQuery = !1, this.hasExecuted = !0;\n                let e = this.activeQuery.submit(this.connection);\n                e && y.nextTick(()=>{\n                    this.activeQuery.handleError(e, this.connection), this.readyForQuery = !0, this._pulseQueryQueue();\n                });\n            } else this.hasExecuted && (this.activeQuery = null, this.emit(\"drain\"));\n        }\n        query(e, t, n) {\n            var i, s, o, u, c;\n            if (e == null) throw new TypeError(\"Client was passed a null or undefined query\");\n            return typeof e.submit == \"function\" ? (o = e.query_timeout || this.connectionParameters.query_timeout, s = i = e, typeof t == \"function\" && (i.callback = i.callback || t)) : (o = this.connectionParameters.query_timeout, i = new Ls(e, t, n), i.callback || (s = new this._Promise((h, f)=>{\n                i.callback = (m, x)=>m ? f(m) : h(x);\n            }))), o && (c = i.callback, u = setTimeout(()=>{\n                var h = new Error(\"Query read timeout\");\n                y.nextTick(()=>{\n                    i.handleError(h, this.connection);\n                }), c(h), i.callback = ()=>{};\n                var f = this.queryQueue.indexOf(i);\n                f > -1 && this.queryQueue.splice(f, 1), this._pulseQueryQueue();\n            }, o), i.callback = (h, f)=>{\n                clearTimeout(u), c(h, f);\n            }), this.binary && !i.binary && (i.binary = !0), i._result && !i._result._types && (i._result._types = this._types), this._queryable ? this._ending ? (y.nextTick(()=>{\n                i.handleError(new Error(\"Client was closed and is not queryable\"), this.connection);\n            }), s) : (this.queryQueue.push(i), this._pulseQueryQueue(), s) : (y.nextTick(()=>{\n                i.handleError(new Error(\"Client has encountered a connection error and is not queryable\"), this.connection);\n            }), s);\n        }\n        ref() {\n            this.connection.ref();\n        }\n        unref() {\n            this.connection.unref();\n        }\n        end(e) {\n            if (this._ending = !0, !this.connection._connecting) if (e) e();\n            else return this._Promise.resolve();\n            if (this.activeQuery || !this._queryable ? this.connection.stream.destroy() : this.connection.end(), e) this.connection.once(\"end\", e);\n            else return new this._Promise((t)=>{\n                this.connection.once(\"end\", t);\n            });\n        }\n    };\n    a(pn, \"Client\");\n    var vt = pn;\n    vt.Query = Ls;\n    Rs.exports = vt;\n});\nvar Us = I((ff, ks)=>{\n    \"use strict\";\n    p();\n    var xc = ye().EventEmitter, Ms = a(function() {}, \"NOOP\"), Ds = a((r, e)=>{\n        let t = r.findIndex(e);\n        return t === -1 ? void 0 : r.splice(t, 1)[0];\n    }, \"removeWhere\"), mn = class mn {\n        constructor(e, t, n){\n            this.client = e, this.idleListener = t, this.timeoutId = n;\n        }\n    };\n    a(mn, \"IdleItem\");\n    var dn = mn, gn = class gn {\n        constructor(e){\n            this.callback = e;\n        }\n    };\n    a(gn, \"PendingItem\");\n    var Ue = gn;\n    function Ec() {\n        throw new Error(\"Release called on client which has already been released to the pool.\");\n    }\n    a(Ec, \"throwOnDoubleRelease\");\n    function _t(r, e) {\n        if (e) return {\n            callback: e,\n            result: void 0\n        };\n        let t, n, i = a(function(o, u) {\n            o ? t(o) : n(u);\n        }, \"cb\"), s = new r(function(o, u) {\n            n = o, t = u;\n        }).catch((o)=>{\n            throw Error.captureStackTrace(o), o;\n        });\n        return {\n            callback: i,\n            result: s\n        };\n    }\n    a(_t, \"promisify\");\n    function vc(r, e) {\n        return a(function t(n) {\n            n.client = e, e.removeListener(\"error\", t), e.on(\"error\", ()=>{\n                r.log(\"additional client error after disconnection due to error\", n);\n            }), r._remove(e), r.emit(\"error\", n, e);\n        }, \"idleListener\");\n    }\n    a(vc, \"makeIdleListener\");\n    var wn = class wn extends xc {\n        constructor(e, t){\n            super(), this.options = Object.assign({}, e), e != null && \"password\" in e && Object.defineProperty(this.options, \"password\", {\n                configurable: !0,\n                enumerable: !1,\n                writable: !0,\n                value: e.password\n            }), e != null && e.ssl && e.ssl.key && Object.defineProperty(this.options.ssl, \"key\", {\n                enumerable: !1\n            }), this.options.max = this.options.max || this.options.poolSize || 10, this.options.maxUses = this.options.maxUses || 1 / 0, this.options.allowExitOnIdle = this.options.allowExitOnIdle || !1, this.options.maxLifetimeSeconds = this.options.maxLifetimeSeconds || 0, this.log = this.options.log || function() {}, this.Client = this.options.Client || t || At().Client, this.Promise = this.options.Promise || w.Promise, typeof this.options.idleTimeoutMillis > \"u\" && (this.options.idleTimeoutMillis = 1e4), this._clients = [], this._idle = [], this._expired = new WeakSet, this._pendingQueue = [], this._endCallback = void 0, this.ending = !1, this.ended = !1;\n        }\n        _isFull() {\n            return this._clients.length >= this.options.max;\n        }\n        _pulseQueue() {\n            if (this.log(\"pulse queue\"), this.ended) {\n                this.log(\"pulse queue ended\");\n                return;\n            }\n            if (this.ending) {\n                this.log(\"pulse queue on ending\"), this._idle.length && this._idle.slice().map((t)=>{\n                    this._remove(t.client);\n                }), this._clients.length || (this.ended = !0, this._endCallback());\n                return;\n            }\n            if (!this._pendingQueue.length) {\n                this.log(\"no queued requests\");\n                return;\n            }\n            if (!this._idle.length && this._isFull()) return;\n            let e = this._pendingQueue.shift();\n            if (this._idle.length) {\n                let t = this._idle.pop();\n                clearTimeout(t.timeoutId);\n                let n = t.client;\n                n.ref && n.ref();\n                let i = t.idleListener;\n                return this._acquireClient(n, e, i, !1);\n            }\n            if (!this._isFull()) return this.newClient(e);\n            throw new Error(\"unexpected condition\");\n        }\n        _remove(e) {\n            let t = Ds(this._idle, (n)=>n.client === e);\n            t !== void 0 && clearTimeout(t.timeoutId), this._clients = this._clients.filter((n)=>n !== e), e.end(), this.emit(\"remove\", e);\n        }\n        connect(e) {\n            if (this.ending) {\n                let i = new Error(\"Cannot use a pool after calling end on the pool\");\n                return e ? e(i) : this.Promise.reject(i);\n            }\n            let t = _t(this.Promise, e), n = t.result;\n            if (this._isFull() || this._idle.length) {\n                if (this._idle.length && y.nextTick(()=>this._pulseQueue()), !this.options.connectionTimeoutMillis) return this._pendingQueue.push(new Ue(t.callback)), n;\n                let i = a((u, c, h)=>{\n                    clearTimeout(o), t.callback(u, c, h);\n                }, \"queueCallback\"), s = new Ue(i), o = setTimeout(()=>{\n                    Ds(this._pendingQueue, (u)=>u.callback === i), s.timedOut = !0, t.callback(new Error(\"timeout exceeded when trying to connect\"));\n                }, this.options.connectionTimeoutMillis);\n                return this._pendingQueue.push(s), n;\n            }\n            return this.newClient(new Ue(t.callback)), n;\n        }\n        newClient(e) {\n            let t = new this.Client(this.options);\n            this._clients.push(t);\n            let n = vc(this, t);\n            this.log(\"checking client timeout\");\n            let i, s = !1;\n            this.options.connectionTimeoutMillis && (i = setTimeout(()=>{\n                this.log(\"ending client due to timeout\"), s = !0, t.connection ? t.connection.stream.destroy() : t.end();\n            }, this.options.connectionTimeoutMillis)), this.log(\"connecting new client\"), t.connect((o)=>{\n                if (i && clearTimeout(i), t.on(\"error\", n), o) this.log(\"client failed to connect\", o), this._clients = this._clients.filter((u)=>u !== t), s && (o.message = \"Connection terminated due to connection timeout\"), this._pulseQueue(), e.timedOut || e.callback(o, void 0, Ms);\n                else {\n                    if (this.log(\"new client connected\"), this.options.maxLifetimeSeconds !== 0) {\n                        let u = setTimeout(()=>{\n                            this.log(\"ending client due to expired lifetime\"), this._expired.add(t), this._idle.findIndex((h)=>h.client === t) !== -1 && this._acquireClient(t, new Ue((h, f, m)=>m()), n, !1);\n                        }, this.options.maxLifetimeSeconds * 1e3);\n                        u.unref(), t.once(\"end\", ()=>clearTimeout(u));\n                    }\n                    return this._acquireClient(t, e, n, !0);\n                }\n            });\n        }\n        _acquireClient(e, t, n, i) {\n            i && this.emit(\"connect\", e), this.emit(\"acquire\", e), e.release = this._releaseOnce(e, n), e.removeListener(\"error\", n), t.timedOut ? i && this.options.verify ? this.options.verify(e, e.release) : e.release() : i && this.options.verify ? this.options.verify(e, (s)=>{\n                if (s) return e.release(s), t.callback(s, void 0, Ms);\n                t.callback(void 0, e, e.release);\n            }) : t.callback(void 0, e, e.release);\n        }\n        _releaseOnce(e, t) {\n            let n = !1;\n            return (i)=>{\n                n && Ec(), n = !0, this._release(e, t, i);\n            };\n        }\n        _release(e, t, n) {\n            if (e.on(\"error\", t), e._poolUseCount = (e._poolUseCount || 0) + 1, this.emit(\"release\", n, e), n || this.ending || !e._queryable || e._ending || e._poolUseCount >= this.options.maxUses) {\n                e._poolUseCount >= this.options.maxUses && this.log(\"remove expended client\"), this._remove(e), this._pulseQueue();\n                return;\n            }\n            if (this._expired.has(e)) {\n                this.log(\"remove expired client\"), this._expired.delete(e), this._remove(e), this._pulseQueue();\n                return;\n            }\n            let s;\n            this.options.idleTimeoutMillis && (s = setTimeout(()=>{\n                this.log(\"remove idle client\"), this._remove(e);\n            }, this.options.idleTimeoutMillis), this.options.allowExitOnIdle && s.unref()), this.options.allowExitOnIdle && e.unref(), this._idle.push(new dn(e, t, s)), this._pulseQueue();\n        }\n        query(e, t, n) {\n            if (typeof e == \"function\") {\n                let s = _t(this.Promise, e);\n                return b(function() {\n                    return s.callback(new Error(\"Passing a function as the first parameter to pool.query is not supported\"));\n                }), s.result;\n            }\n            typeof t == \"function\" && (n = t, t = void 0);\n            let i = _t(this.Promise, n);\n            return n = i.callback, this.connect((s, o)=>{\n                if (s) return n(s);\n                let u = !1, c = a((h)=>{\n                    u || (u = !0, o.release(h), n(h));\n                }, \"onError\");\n                o.once(\"error\", c), this.log(\"dispatching query\");\n                try {\n                    o.query(e, t, (h, f)=>{\n                        if (this.log(\"query dispatched\"), o.removeListener(\"error\", c), !u) return u = !0, o.release(h), h ? n(h) : n(void 0, f);\n                    });\n                } catch (h) {\n                    return o.release(h), n(h);\n                }\n            }), i.result;\n        }\n        end(e) {\n            if (this.log(\"ending\"), this.ending) {\n                let n = new Error(\"Called end on pool more than once\");\n                return e ? e(n) : this.Promise.reject(n);\n            }\n            this.ending = !0;\n            let t = _t(this.Promise, e);\n            return this._endCallback = t.callback, this._pulseQueue(), t.result;\n        }\n        get waitingCount() {\n            return this._pendingQueue.length;\n        }\n        get idleCount() {\n            return this._idle.length;\n        }\n        get expiredCount() {\n            return this._clients.reduce((e, t)=>e + (this._expired.has(t) ? 1 : 0), 0);\n        }\n        get totalCount() {\n            return this._clients.length;\n        }\n    };\n    a(wn, \"Pool\");\n    var yn = wn;\n    ks.exports = yn;\n});\nvar Os = {};\nY(Os, {\n    default: ()=>_c\n});\nvar _c, qs = W(()=>{\n    p();\n    _c = {};\n});\nvar Ns = I((mf, Ac)=>{\n    Ac.exports = {\n        name: \"pg\",\n        version: \"8.8.0\",\n        description: \"PostgreSQL client - pure javascript & libpq with the same API\",\n        keywords: [\n            \"database\",\n            \"libpq\",\n            \"pg\",\n            \"postgre\",\n            \"postgres\",\n            \"postgresql\",\n            \"rdbms\"\n        ],\n        homepage: \"https://github.com/brianc/node-postgres\",\n        repository: {\n            type: \"git\",\n            url: \"git://github.com/brianc/node-postgres.git\",\n            directory: \"packages/pg\"\n        },\n        author: \"Brian Carlson <brian.m.carlson@gmail.com>\",\n        main: \"./lib\",\n        dependencies: {\n            \"buffer-writer\": \"2.0.0\",\n            \"packet-reader\": \"1.0.0\",\n            \"pg-connection-string\": \"^2.5.0\",\n            \"pg-pool\": \"^3.5.2\",\n            \"pg-protocol\": \"^1.5.0\",\n            \"pg-types\": \"^2.1.0\",\n            pgpass: \"1.x\"\n        },\n        devDependencies: {\n            async: \"2.6.4\",\n            bluebird: \"3.5.2\",\n            co: \"4.6.0\",\n            \"pg-copy-streams\": \"0.3.0\"\n        },\n        peerDependencies: {\n            \"pg-native\": \">=3.0.1\"\n        },\n        peerDependenciesMeta: {\n            \"pg-native\": {\n                optional: !0\n            }\n        },\n        scripts: {\n            test: \"make test-all\"\n        },\n        files: [\n            \"lib\",\n            \"SPONSORS.md\"\n        ],\n        license: \"MIT\",\n        engines: {\n            node: \">= 8.0.0\"\n        },\n        gitHead: \"c99fb2c127ddf8d712500db2c7b9a5491a178655\"\n    };\n});\nvar js = I((gf, Ws)=>{\n    \"use strict\";\n    p();\n    var Qs = ye().EventEmitter, Cc = (et(), U(Xe)), bn = Ze(), Oe = Ws.exports = function(r, e, t) {\n        Qs.call(this), r = bn.normalizeQueryConfig(r, e, t), this.text = r.text, this.values = r.values, this.name = r.name, this.callback = r.callback, this.state = \"new\", this._arrayMode = r.rowMode === \"array\", this._emitRowEvents = !1, this.on(\"newListener\", (function(n) {\n            n === \"row\" && (this._emitRowEvents = !0);\n        }).bind(this));\n    };\n    Cc.inherits(Oe, Qs);\n    var Ic = {\n        sqlState: \"code\",\n        statementPosition: \"position\",\n        messagePrimary: \"message\",\n        context: \"where\",\n        schemaName: \"schema\",\n        tableName: \"table\",\n        columnName: \"column\",\n        dataTypeName: \"dataType\",\n        constraintName: \"constraint\",\n        sourceFile: \"file\",\n        sourceLine: \"line\",\n        sourceFunction: \"routine\"\n    };\n    Oe.prototype.handleError = function(r) {\n        var e = this.native.pq.resultErrorFields();\n        if (e) for(var t in e){\n            var n = Ic[t] || t;\n            r[n] = e[t];\n        }\n        this.callback ? this.callback(r) : this.emit(\"error\", r), this.state = \"error\";\n    };\n    Oe.prototype.then = function(r, e) {\n        return this._getPromise().then(r, e);\n    };\n    Oe.prototype.catch = function(r) {\n        return this._getPromise().catch(r);\n    };\n    Oe.prototype._getPromise = function() {\n        return this._promise ? this._promise : (this._promise = new Promise((function(r, e) {\n            this._once(\"end\", r), this._once(\"error\", e);\n        }).bind(this)), this._promise);\n    };\n    Oe.prototype.submit = function(r) {\n        this.state = \"running\";\n        var e = this;\n        this.native = r.native, r.native.arrayMode = this._arrayMode;\n        var t = a(function(s, o, u) {\n            if (r.native.arrayMode = !1, b(function() {\n                e.emit(\"_done\");\n            }), s) return e.handleError(s);\n            e._emitRowEvents && (u.length > 1 ? o.forEach((c, h)=>{\n                c.forEach((f)=>{\n                    e.emit(\"row\", f, u[h]);\n                });\n            }) : o.forEach(function(c) {\n                e.emit(\"row\", c, u);\n            })), e.state = \"end\", e.emit(\"end\", u), e.callback && e.callback(null, u);\n        }, \"after\");\n        if (y.domain && (t = y.domain.bind(t)), this.name) {\n            this.name.length > 63 && (console.error(\"Warning! Postgres only supports 63 characters for query names.\"), console.error(\"You supplied %s (%s)\", this.name, this.name.length), console.error(\"This can cause conflicts and silent errors executing queries\"));\n            var n = (this.values || []).map(bn.prepareValue);\n            if (r.namedQueries[this.name]) {\n                if (this.text && r.namedQueries[this.name] !== this.text) {\n                    let s = new Error(`Pre\\\npared statements must be unique - '${this.name}' was used for a different statem\\\nent`);\n                    return t(s);\n                }\n                return r.native.execute(this.name, n, t);\n            }\n            return r.native.prepare(this.name, this.text, n.length, function(s) {\n                return s ? t(s) : (r.namedQueries[e.name] = e.text, e.native.execute(e.name, n, t));\n            });\n        } else if (this.values) {\n            if (!Array.isArray(this.values)) {\n                let s = new Error(\"Query values must be an array\");\n                return t(s);\n            }\n            var i = this.values.map(bn.prepareValue);\n            r.native.query(this.text, i, t);\n        } else r.native.query(this.text, t);\n    };\n});\nvar Ks = I((xf, $s)=>{\n    \"use strict\";\n    p();\n    var Tc = (qs(), U(Os)), Pc = dr(), Sf = Ns(), Hs = ye().EventEmitter, Bc = (et(), U(Xe)), Lc = wt(), Gs = js(), V = $s.exports = function(r) {\n        Hs.call(this), r = r || {}, this._Promise = r.Promise || w.Promise, this._types = new Pc(r.types), this.native = new Tc({\n            types: this._types\n        }), this._queryQueue = [], this._ending = !1, this._connecting = !1, this._connected = !1, this._queryable = !0;\n        var e = this.connectionParameters = new Lc(r);\n        this.user = e.user, Object.defineProperty(this, \"password\", {\n            configurable: !0,\n            enumerable: !1,\n            writable: !0,\n            value: e.password\n        }), this.database = e.database, this.host = e.host, this.port = e.port, this.namedQueries = {};\n    };\n    V.Query = Gs;\n    Bc.inherits(V, Hs);\n    V.prototype._errorAllQueries = function(r) {\n        let e = a((t)=>{\n            y.nextTick(()=>{\n                t.native = this.native, t.handleError(r);\n            });\n        }, \"enqueueError\");\n        this._hasActiveQuery() && (e(this._activeQuery), this._activeQuery = null), this._queryQueue.forEach(e), this._queryQueue.length = 0;\n    };\n    V.prototype._connect = function(r) {\n        var e = this;\n        if (this._connecting) {\n            y.nextTick(()=>r(new Error(\"Client has already been connected. You cannot reuse a client.\")));\n            return;\n        }\n        this._connecting = !0, this.connectionParameters.getLibpqConnectionString(function(t, n) {\n            if (t) return r(t);\n            e.native.connect(n, function(i) {\n                if (i) return e.native.end(), r(i);\n                e._connected = !0, e.native.on(\"error\", function(s) {\n                    e._queryable = !1, e._errorAllQueries(s), e.emit(\"error\", s);\n                }), e.native.on(\"notification\", function(s) {\n                    e.emit(\"notification\", {\n                        channel: s.relname,\n                        payload: s.extra\n                    });\n                }), e.emit(\"connect\"), e._pulseQueryQueue(!0), r();\n            });\n        });\n    };\n    V.prototype.connect = function(r) {\n        if (r) {\n            this._connect(r);\n            return;\n        }\n        return new this._Promise((e, t)=>{\n            this._connect((n)=>{\n                n ? t(n) : e();\n            });\n        });\n    };\n    V.prototype.query = function(r, e, t) {\n        var n, i, s, o, u;\n        if (r == null) throw new TypeError(\"Client was passed a null or undefined query\");\n        if (typeof r.submit == \"function\") s = r.query_timeout || this.connectionParameters.query_timeout, i = n = r, typeof e == \"function\" && (r.callback = e);\n        else if (s = this.connectionParameters.query_timeout, n = new Gs(r, e, t), !n.callback) {\n            let c, h;\n            i = new this._Promise((f, m)=>{\n                c = f, h = m;\n            }), n.callback = (f, m)=>f ? h(f) : c(m);\n        }\n        return s && (u = n.callback, o = setTimeout(()=>{\n            var c = new Error(\"Query read timeout\");\n            y.nextTick(()=>{\n                n.handleError(c, this.connection);\n            }), u(c), n.callback = ()=>{};\n            var h = this._queryQueue.indexOf(n);\n            h > -1 && this._queryQueue.splice(h, 1), this._pulseQueryQueue();\n        }, s), n.callback = (c, h)=>{\n            clearTimeout(o), u(c, h);\n        }), this._queryable ? this._ending ? (n.native = this.native, y.nextTick(()=>{\n            n.handleError(new Error(\"Client was closed and is not queryable\"));\n        }), i) : (this._queryQueue.push(n), this._pulseQueryQueue(), i) : (n.native = this.native, y.nextTick(()=>{\n            n.handleError(new Error(\"Client has encountered a connection error and is not queryable\"));\n        }), i);\n    };\n    V.prototype.end = function(r) {\n        var e = this;\n        this._ending = !0, this._connected || this.once(\"connect\", this.end.bind(this, r));\n        var t;\n        return r || (t = new this._Promise(function(n, i) {\n            r = a((s)=>s ? i(s) : n(), \"cb\");\n        })), this.native.end(function() {\n            e._errorAllQueries(new Error(\"Connection terminated\")), y.nextTick(()=>{\n                e.emit(\"end\"), r && r();\n            });\n        }), t;\n    };\n    V.prototype._hasActiveQuery = function() {\n        return this._activeQuery && this._activeQuery.state !== \"error\" && this._activeQuery.state !== \"end\";\n    };\n    V.prototype._pulseQueryQueue = function(r) {\n        if (this._connected && !this._hasActiveQuery()) {\n            var e = this._queryQueue.shift();\n            if (!e) {\n                r || this.emit(\"drain\");\n                return;\n            }\n            this._activeQuery = e, e.submit(this);\n            var t = this;\n            e.once(\"_done\", function() {\n                t._pulseQueryQueue();\n            });\n        }\n    };\n    V.prototype.cancel = function(r) {\n        this._activeQuery === r ? this.native.cancel(function() {}) : this._queryQueue.indexOf(r) !== -1 && this._queryQueue.splice(this._queryQueue.indexOf(r), 1);\n    };\n    V.prototype.ref = function() {};\n    V.prototype.unref = function() {};\n    V.prototype.setTypeParser = function(r, e, t) {\n        return this._types.setTypeParser(r, e, t);\n    };\n    V.prototype.getTypeParser = function(r, e) {\n        return this._types.getTypeParser(r, e);\n    };\n});\nvar Sn = I((_f, Vs)=>{\n    \"use strict\";\n    p();\n    Vs.exports = Ks();\n});\nvar At = I((Cf, rt)=>{\n    \"use strict\";\n    p();\n    var Rc = Fs(), Fc = Ye(), Mc = ln(), Dc = Us(), { DatabaseError: kc } = un(), Uc = a((r)=>{\n        var e;\n        return e = class extends Dc {\n            constructor(n){\n                super(n, r);\n            }\n        }, a(e, \"BoundPool\"), e;\n    }, \"poolFactory\"), xn = a(function(r) {\n        this.defaults = Fc, this.Client = r, this.Query = this.Client.Query, this.Pool = Uc(this.Client), this._pools = [], this.Connection = Mc, this.types = ze(), this.DatabaseError = kc;\n    }, \"PG\");\n    typeof y.env.NODE_PG_FORCE_NATIVE < \"u\" ? rt.exports = new xn(Sn()) : (rt.exports = new xn(Rc), Object.defineProperty(rt.exports, \"native\", {\n        configurable: !0,\n        enumerable: !1,\n        get () {\n            var r = null;\n            try {\n                r = new xn(Sn());\n            } catch (e) {\n                if (e.code !== \"MODULE_NOT_FOUND\") throw e;\n            }\n            return Object.defineProperty(rt.exports, \"native\", {\n                value: r\n            }), r;\n        }\n    }));\n});\nvar qc = {};\nY(qc, {\n    Client: ()=>Ct,\n    ClientBase: ()=>K.ClientBase,\n    Connection: ()=>K.Connection,\n    DatabaseError: ()=>K.DatabaseError,\n    Pool: ()=>En,\n    Query: ()=>K.Query,\n    defaults: ()=>K.defaults,\n    neon: ()=>pt,\n    neonConfig: ()=>me,\n    types: ()=>K.types\n});\nmodule.exports = U(qc);\np();\np();\nqt();\nut();\nvar qi = Ne(Ze());\nvar tr = class tr extends Error {\n    constructor(){\n        super(...arguments);\n        T(this, \"name\", \"NeonDbError\");\n        T(this, \"code\", null);\n        T(this, \"sourceError\");\n    }\n};\na(tr, \"NeonDbError\");\nvar Je = tr;\nfunction pt(r, { arrayMode: e, fullResults: t, fetchOptions: n, queryCallback: i, resultCallback: s } = {}) {\n    if (!r) throw new Error(\"No database connection string was provided to `neon()`. Perhaps an environment variable has not been set?\");\n    let o;\n    try {\n        o = Ot(r);\n    } catch  {\n        throw new Error(\"Database connection string provided to `neon()` is not a valid URL. Connection string: \" + String(r));\n    }\n    let { protocol: u, username: c, password: h, hostname: f, port: m, pathname: x } = o;\n    if (u !== \"postgres:\" && u !== \"postgresql:\" || !c || !h || !f || !x) throw new Error(\"Database connection string format for `neon()` should be: postgresql://user:password@host.tld/dbname?option=value\");\n    return async function(_, ...P) {\n        let k = e ?? !1, z = t ?? !1, ue = n ?? {}, B;\n        if (typeof _ == \"string\") {\n            B = _;\n            let C = P[1];\n            C !== void 0 && (C.arrayMode !== void 0 && (k = C.arrayMode), C.fullResults !== void 0 && (z = C.fullResults), C.fetchOptions !== void 0 && (ue = {\n                ...ue,\n                ...C.fetchOptions\n            })), P = P[0] ?? [];\n        } else {\n            B = \"\";\n            for(let C = 0; C < _.length; C++)B += _[C], C < P.length && (B += \"$\" + (C + 1));\n        }\n        P = P.map((C)=>(0, qi.prepareValue)(C));\n        let { fetchEndpoint: v, fetchConnectionCache: te, fetchFunction: be } = me, Z = typeof v == \"function\" ? v(f, m) : v, pe = te === !0 ? {\n            \"Neon-Pool-Opt-In\": \"true\"\n        } : {}, re = {\n            query: B,\n            params: P\n        };\n        i && i(re);\n        let ie = {\n            cache: \"no-store\"\n        };\n        try {\n            new Request(\"x:\", ie);\n        } catch  {\n            ie = {};\n        }\n        let L;\n        try {\n            L = await (be ?? fetch)(Z, {\n                method: \"POST\",\n                body: JSON.stringify(re),\n                headers: {\n                    \"Neon-Connection-String\": r,\n                    \"Neon-Raw-Text-Output\": \"true\",\n                    \"Neon-Array-Mode\": \"true\",\n                    ...pe\n                },\n                ...ie,\n                ...ue\n            });\n        } catch (C) {\n            let H = new Je(`Error connecting to database: ${C.message}`);\n            throw H.sourceError = C, H;\n        }\n        if (L.ok) {\n            let C = await L.json(), H = C.fields.map((ne)=>ne.name), ce = C.fields.map((ne)=>K.types.getTypeParser(ne.dataTypeID)), se = k === !0 ? C.rows.map((ne)=>ne.map((he, ve)=>he === null ? null : ce[ve](he))) : C.rows.map((ne)=>Object.fromEntries(ne.map((he, ve)=>[\n                        H[ve],\n                        he === null ? null : ce[ve](he)\n                    ])));\n            return s && s(re, C, se, {\n                arrayMode: k,\n                fullResults: z\n            }), z ? (C.viaNeonFetch = !0, C.rowAsArray = k, C.rows = se, C) : se;\n        } else {\n            let { status: C } = L;\n            if (C === 400) {\n                let { message: H, code: ce } = await L.json(), se = new Je(H);\n                throw se.code = ce, se;\n            } else {\n                let H = await L.text();\n                throw new Je(`\\\nDatabase error (HTTP status ${C}): ${H}`);\n            }\n        }\n    };\n}\na(pt, \"neon\");\nvar It = Ne(At());\nut();\nvar zs = Ne(wt()), K = Ne(At());\nvar vn = class vn extends It.Client {\n    constructor(t){\n        super(t);\n        this.config = t;\n    }\n    get neonConfig() {\n        return this.connection.stream;\n    }\n    connect(t) {\n        let { neonConfig: n } = this;\n        n.forceDisablePgSSL && (this.ssl = this.connection.ssl = !1), this.ssl && n.useSecureWebSocket && console.warn(\"SSL is enabled for both Postgres (e.g. ?sslmode=require in the connection string + forceDisablePgSSL = false) and the WebSocket tunnel (useSecureWebSocket = true). Double encryption will increase latency and CPU usage. It may be appropriate to disable SSL in the Postgres connection parameters or set forceDisablePgSSL = true.\");\n        let i = this.config?.host !== void 0 || this.config?.connectionString !== void 0 || y.env.PGHOST !== void 0, s = y.env.USER ?? y.env.USERNAME;\n        if (!i && this.host === \"localhost\" && this.user === s && this.database === s && this.password === null) throw new Error(`No datab\\\nase host or connection string was set, and key parameters have default values (h\\\nost: localhost, user: ${s}, db: ${s}, password: null). Is an environment variabl\\\ne missing? Alternatively, if you intended to connect with these parameters, plea\\\nse set the host to 'localhost' explicitly.`);\n        let o = super.connect(t), u = n.pipelineTLS && this.ssl, c = n.pipelineConnect === \"password\";\n        if (!u && !n.pipelineConnect) return o;\n        let h = this.connection;\n        if (u && h.on(\"connect\", ()=>h.stream.emit(\"data\", \"S\")), c) {\n            h.removeAllListeners(\"authenticationCleartextPassword\"), h.removeAllListeners(\"readyForQuery\"), h.once(\"readyForQuery\", ()=>h.on(\"readyForQuery\", this._handleReadyForQuery.bind(this)));\n            let f = this.ssl ? \"sslconnect\" : \"connect\";\n            h.on(f, ()=>{\n                this._handleAuthCleartextPassword(), this._handleReadyForQuery();\n            });\n        }\n        return o;\n    }\n    async _handleAuthSASLContinue(t) {\n        let n = this.saslSession, i = this.password, s = t.data;\n        if (n.message !== \"SASLInitialResponse\" || typeof i != \"string\" || typeof s != \"string\") throw new Error(\"SASL: protocol error\");\n        let o = Object.fromEntries(s.split(\",\").map((qe)=>{\n            if (!/^.=/.test(qe)) throw new Error(\"SASL: Invalid attribute pair entry\");\n            let Se = qe[0], Ys = qe.substring(2);\n            return [\n                Se,\n                Ys\n            ];\n        })), u = o.r, c = o.s, h = o.i;\n        if (!u || !/^[!-+--~]+$/.test(u)) throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: nonce missing/unprintable\");\n        if (!c || !/^(?:[a-zA-Z0-9+/]{4})*(?:[a-zA-Z0-9+/]{2}==|[a-zA-Z0-9+/]{3}=)?$/.test(c)) throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: salt missing/not base64\");\n        if (!h || !/^[1-9][0-9]*$/.test(h)) throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: missing/invalid iteration count\");\n        if (!u.startsWith(n.clientNonce)) throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: server nonce does not start with client nonce\");\n        if (u.length === n.clientNonce.length) throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: server nonce is too short\");\n        let f = parseInt(h, 10), m = d.from(c, \"base64\"), x = new TextEncoder, _ = x.encode(i), P = await g.subtle.importKey(\"raw\", _, {\n            name: \"HMAC\",\n            hash: {\n                name: \"SHA-256\"\n            }\n        }, !1, [\n            \"sign\"\n        ]), k = new Uint8Array(await g.subtle.sign(\"HMAC\", P, d.concat([\n            m,\n            d.from([\n                0,\n                0,\n                0,\n                1\n            ])\n        ]))), z = k;\n        for(var ue = 0; ue < f - 1; ue++)k = new Uint8Array(await g.subtle.sign(\"HMAC\", P, k)), z = d.from(z.map((qe, Se)=>z[Se] ^ k[Se]));\n        let B = z, v = await g.subtle.importKey(\"raw\", B, {\n            name: \"HMAC\",\n            hash: {\n                name: \"SHA-256\"\n            }\n        }, !1, [\n            \"sign\"\n        ]), te = new Uint8Array(await g.subtle.sign(\"HMAC\", v, x.encode(\"Client Key\"))), be = await g.subtle.digest(\"SHA-256\", te), Z = \"n=*,r=\" + n.clientNonce, pe = \"r=\" + u + \",s=\" + c + \",i=\" + f, re = \"c=biws,r=\" + u, ie = Z + \",\" + pe + \",\" + re, L = await g.subtle.importKey(\"raw\", be, {\n            name: \"HMAC\",\n            hash: {\n                name: \"SHA-256\"\n            }\n        }, !1, [\n            \"sign\"\n        ]);\n        var C = new Uint8Array(await g.subtle.sign(\"HMAC\", L, x.encode(ie))), H = d.from(te.map((qe, Se)=>te[Se] ^ C[Se])), ce = H.toString(\"base64\");\n        let se = await g.subtle.importKey(\"raw\", B, {\n            name: \"HMAC\",\n            hash: {\n                name: \"SHA-256\"\n            }\n        }, !1, [\n            \"sign\"\n        ]), ne = await g.subtle.sign(\"HMAC\", se, x.encode(\"Server Key\")), he = await g.subtle.importKey(\"raw\", ne, {\n            name: \"HMAC\",\n            hash: {\n                name: \"SHA-256\"\n            }\n        }, !1, [\n            \"sign\"\n        ]);\n        var ve = d.from(await g.subtle.sign(\"HMAC\", he, x.encode(ie)));\n        n.message = \"SASLResponse\", n.serverSignature = ve.toString(\"base64\"), n.response = re + \",p=\" + ce, this.connection.sendSCRAMClientFinalMessage(this.saslSession.response);\n    }\n};\na(vn, \"NeonClient\");\nvar Ct = vn;\nfunction Oc(r, e) {\n    if (e) return {\n        callback: e,\n        result: void 0\n    };\n    let t, n, i = a(function(o, u) {\n        o ? t(o) : n(u);\n    }, \"cb\"), s = new r(function(o, u) {\n        n = o, t = u;\n    });\n    return {\n        callback: i,\n        result: s\n    };\n}\na(Oc, \"promisify\");\nvar _n = class _n extends It.Pool {\n    constructor(){\n        super(...arguments);\n        T(this, \"Client\", Ct);\n        T(this, \"hasFetchUnsupportedListeners\", !1);\n    }\n    on(t, n) {\n        return t !== \"error\" && (this.hasFetchUnsupportedListeners = !0), super.on(t, n);\n    }\n    query(t, n, i) {\n        if (!me.poolQueryViaFetch || this.hasFetchUnsupportedListeners || typeof t == \"function\") return super.query(t, n, i);\n        typeof n == \"function\" && (i = n, n = void 0);\n        let s = Oc(this.Promise, i);\n        i = s.callback;\n        try {\n            let o = new zs.default(this.options), u = encodeURIComponent, c = encodeURI, h = `postgresql://${u(o.user)}:${u(o.password)}@${u(o.host)}/${c(o.database)}`, f = typeof t == \"string\" ? t : t.text, m = n ?? t.values ?? [];\n            pt(h, {\n                fullResults: !0,\n                arrayMode: t.rowMode === \"array\"\n            })(f, m).then((_)=>i(void 0, _)).catch((_)=>i(_));\n        } catch (o) {\n            i(o);\n        }\n        return s.result;\n    }\n};\na(_n, \"NeonPool\");\nvar En = _n; /*! Bundled license information:\n\nieee754/index.js:\n  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)\n\nbuffer/index.js:\n  (*!\n   * The buffer module from node.js, for the browser.\n   *\n   * @author   Feross Aboukhadijeh <https://feross.org>\n   * @license  MIT\n   *)\n*/ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@neondatabase/serverless/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@neondatabase/serverless/index.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/@neondatabase/serverless/index.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Client: () => (/* binding */ Client),\n/* harmony export */   ClientBase: () => (/* binding */ ClientBase),\n/* harmony export */   Connection: () => (/* binding */ Connection),\n/* harmony export */   DatabaseError: () => (/* binding */ DatabaseError),\n/* harmony export */   Pool: () => (/* binding */ Pool),\n/* harmony export */   Query: () => (/* binding */ Query),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   defaults: () => (/* binding */ defaults),\n/* harmony export */   neon: () => (/* binding */ neon),\n/* harmony export */   neonConfig: () => (/* binding */ neonConfig),\n/* harmony export */   types: () => (/* binding */ types)\n/* harmony export */ });\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.js */ \"(rsc)/./node_modules/@neondatabase/serverless/index.js\");\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_index_js__WEBPACK_IMPORTED_MODULE_0__);\nconst Client = _index_js__WEBPACK_IMPORTED_MODULE_0__.Client;\nconst ClientBase = _index_js__WEBPACK_IMPORTED_MODULE_0__.ClientBase;\nconst Connection = _index_js__WEBPACK_IMPORTED_MODULE_0__.Connection;\nconst DatabaseError = _index_js__WEBPACK_IMPORTED_MODULE_0__.DatabaseError;\nconst Pool = _index_js__WEBPACK_IMPORTED_MODULE_0__.Pool;\nconst Query = _index_js__WEBPACK_IMPORTED_MODULE_0__.Query;\nconst defaults = _index_js__WEBPACK_IMPORTED_MODULE_0__.defaults;\nconst neon = _index_js__WEBPACK_IMPORTED_MODULE_0__.neon;\nconst neonConfig = _index_js__WEBPACK_IMPORTED_MODULE_0__.neonConfig;\nconst types = _index_js__WEBPACK_IMPORTED_MODULE_0__.types;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG5lb25kYXRhYmFzZS9zZXJ2ZXJsZXNzL2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBNkI7QUFFN0IsaUVBQWVBLHNDQUFHQSxFQUFDO0FBQ1osTUFBTUMsU0FBU0QsNkNBQVUsQ0FBQztBQUMxQixNQUFNRSxhQUFhRixpREFBYyxDQUFDO0FBQ2xDLE1BQU1HLGFBQWFILGlEQUFjLENBQUM7QUFDbEMsTUFBTUksZ0JBQWdCSixvREFBaUIsQ0FBQztBQUN4QyxNQUFNSyxPQUFPTCwyQ0FBUSxDQUFDO0FBQ3RCLE1BQU1NLFFBQVFOLDRDQUFTLENBQUM7QUFDeEIsTUFBTU8sV0FBV1AsK0NBQVksQ0FBQztBQUM5QixNQUFNUSxPQUFPUiwyQ0FBUSxDQUFDO0FBQ3RCLE1BQU1TLGFBQWFULGlEQUFjLENBQUM7QUFDbEMsTUFBTVUsUUFBUVYsNENBQVMsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NydWQvLi9ub2RlX21vZHVsZXMvQG5lb25kYXRhYmFzZS9zZXJ2ZXJsZXNzL2luZGV4Lm1qcz83MDk5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtb2QgZnJvbSBcIi4vaW5kZXguanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgbW9kO1xuZXhwb3J0IGNvbnN0IENsaWVudCA9IG1vZC5DbGllbnQ7XG5leHBvcnQgY29uc3QgQ2xpZW50QmFzZSA9IG1vZC5DbGllbnRCYXNlO1xuZXhwb3J0IGNvbnN0IENvbm5lY3Rpb24gPSBtb2QuQ29ubmVjdGlvbjtcbmV4cG9ydCBjb25zdCBEYXRhYmFzZUVycm9yID0gbW9kLkRhdGFiYXNlRXJyb3I7XG5leHBvcnQgY29uc3QgUG9vbCA9IG1vZC5Qb29sO1xuZXhwb3J0IGNvbnN0IFF1ZXJ5ID0gbW9kLlF1ZXJ5O1xuZXhwb3J0IGNvbnN0IGRlZmF1bHRzID0gbW9kLmRlZmF1bHRzO1xuZXhwb3J0IGNvbnN0IG5lb24gPSBtb2QubmVvbjtcbmV4cG9ydCBjb25zdCBuZW9uQ29uZmlnID0gbW9kLm5lb25Db25maWc7XG5leHBvcnQgY29uc3QgdHlwZXMgPSBtb2QudHlwZXM7XG4iXSwibmFtZXMiOlsibW9kIiwiQ2xpZW50IiwiQ2xpZW50QmFzZSIsIkNvbm5lY3Rpb24iLCJEYXRhYmFzZUVycm9yIiwiUG9vbCIsIlF1ZXJ5IiwiZGVmYXVsdHMiLCJuZW9uIiwibmVvbkNvbmZpZyIsInR5cGVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@neondatabase/serverless/index.mjs\n");

/***/ })

};
;